import json
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
import time
import re
import sqlite3
import aiogram
from aiogram import executor
import datetime
from aiogram.types import Message
import asyncio
from contol import *
from avito_api import *
from aiogram.utils import markdown
from clean import *
import threading
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from state import *
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MemoryStorage
from aiogram.utils import executor
from aiogram.utils import markdown as md
from aiogram.utils import executor
from aiogram import executor
from yoomoney import Client
import os
from aiogram import types
from aiogram.utils import exceptions
from money_cart import get_sum
import json
import schedule
from aiogram.dispatcher.filters import Command, ChatTypeFilter
yoomoney_token = "4100117394518969.25C11A278171A9D98CF57B29E20869FE7175F8E5F0D82C642CB12B819214769229B792D693CD7A205D5D8B524294B1E710CECA73FB581A110CD748405B3A3709592F767FB683ACCE256C92453C4EA831F0E9EBA02063DF8DBA8728EE9B2A2CC60AA1EAD2AF79160F273D90F23C06E6E66B7B874261A33FD1BBA66C0A96297EAD"

client = Client(yoomoney_token)
# –í–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
BOT_TOKEN = '6515821471:AAFspRJMRcCFfJP8-g9WRGS02jK-aydFsBo'




# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
memory_storage = MemoryStorage()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MemoryStorage
dp = Dispatcher(bot,storage=memory_storage)
dp.middleware.setup(LoggingMiddleware())
sent_messages = {}


current_page = 0
current_page_message_id = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π


current_page2 = 0
current_page_message_id2 = None

# –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
unique_user_names = set()
image_folder = 'images/test_period'


async def check_new_messages(message:types.Message):
    while True:
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        user_id = get_user_id(message.chat.id)
        token = get_token(message.chat.id)
        avito_data = get_avito_unread_data(token=token, user_id=user_id)
        
        if avito_data and 'users' in avito_data:
            new_message_count = len(avito_data['users'])
            if new_message_count > 0:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è,
                # –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Ö.
                await bot.send_message(message.chat.id, f'–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {new_message_count}')
        
        await asyncio.sleep(10)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)

@dp.message_handler(Command("start") & ChatTypeFilter(types.ChatType.PRIVATE))
async def start(message: types.Message):
    text = '''–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö API-–∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Ç–∏–ø "–ö–û–ú–ü–ê–ù–ò–Ø". –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º —Ç–∏–ø–∞ "–ß–ê–°–¢–ù–û–ï –õ–ò–¶–û". –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤ –ª—é–±–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ç–∞—Ä–∏—Ñ–µ.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ "–ß–ê–°–¢–ù–û–ï –õ–ò–¶–û", –≤–∞–º —Å–ª–µ–¥—É–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ê–≤–∏—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É 8 800 600 00 01 –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ "–ö–û–ú–ü–ê–ù–ò–Ø". –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ API-–∫–ª—é—á–∞–º.

–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–∏–ø "–ö–û–ú–ü–ê–ù–ò–Ø" –≤—ã –±—É–¥–µ—Ç–µ –æ–±—è–∑–∞–Ω—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –∏ –æ–±—Ä–∞—Ç–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è–º –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º.

–ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É, –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ —Å—Å—ã–ª–∫–µ @timaadev'''
    await bot.send_message(message.chat.id,text=text)
    with open('video.mp4', 'rb') as video_file:
        await bot.send_video(chat_id=message.chat.id, video=video_file)
    text1 = '''–ò–ù–°–¢–†–£–ö–¶–ò–Ø ‚Ññ1 ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å:

1.–°–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤—Å–µ —á–∞—Ç—ã –±—ã–ª–∏ —É –≤–∞—Å –Ω–∞ –≤–∏–¥—É

2.–°–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–∞ (SK2) - –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –±–æ—Ç–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ê–î–ú–ò–ù–ò–°–¢–ê–¢–û–†–û–ú‚ö†Ô∏è

–î–∞–ª—å–Ω–µ–π—à—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –í—ã –Ω–∞–π–¥–µ—Ç–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ "–õ—é–±–æ–π –≥—Ä—É–ø–ø—ã" –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "/start"'''
    user_id = message.chat.id
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    row = ''
    try:
        cursor.execute('SELECT * FROM clients WHERE id_telegram = ?', (user_id,))
        row = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    except Exception as e:
        print("Error:", e)
        row = None
    if row is None:
        cursor.execute('INSERT INTO clients (id_telegram) VALUES (?)', (user_id,))
        conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    else:
        pass

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üìπ–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='video'),
                 types.InlineKeyboardButton(text='üììC–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='spisok'))
    keyboard.add(types.InlineKeyboardButton(text='ü§ñ–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', callback_data='auto_answera'),
                 types.InlineKeyboardButton(text='üÜò–ü–æ–º–æ—â—å', callback_data='sos'))
    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT test_period_end FROM clients WHERE id_telegram = ?', (user_id,))
        test_period_end = cursor.fetchone()
        if test_period_end[0] is None:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(types.InlineKeyboardButton(text='üïí –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='test_period_start'))
    except:
        pass
    conn.close()


    await bot.send_message(message.chat.id, text=text1,reply_markup=keyboard)

@dp.message_handler(Command("start") & ChatTypeFilter(types.ChatType.GROUP))
async def start_group(message: types.Message):
    chat_id = message.chat.id
    user_id_telegram = message.from_user.id
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É chats
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ acc_id –∏ chat_id
            cursor.execute('SELECT id FROM chats WHERE acc_id = ? AND chat_id = ?', (user_id[0], chat_id))
            existing_chat = cursor.fetchone()
            if not existing_chat:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É chats
                cursor.execute('SELECT test_period_end FROM clients WHERE id = ?', (user_id[0],))
                test_per = cursor.fetchone()
                cursor.execute('INSERT INTO chats (chat_id, acc_id, test_period) VALUES (?, ?, ?)', (chat_id, user_id[0], test_per[0]))
                conn.commit()
            else:
                await bot.send_mes
    except:
        pass

    conn.close()

    text1 = '''–ü–ï–†–ï–î –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–†–û–ß–¢–ò–¢–ï‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ Api –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ "–ö–û–ú–ü–ê–ù–ò–Æ" . –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Ç–∞—Ä–∏—Ñ–µ‚ùóÔ∏è

–í–ê–ñ–ù–û:  —Å —Ç–∏–ø–æ–º "–ß–ê–°–¢–ù–û–ï –õ–ò–¶–û" –ë–û–¢ —Ä–∞–±–æ—Ç–∞—Ç—å –ù–ï  –ë–£–î–ï–¢‚ùóÔ∏è

–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ", —Ç–æ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ê–≤–∏—Ç–æ (8 800 600 00 01) –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Ç–∏–ø "–ö–û–ú–ü–ê–ù–ò–Ø". –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ. –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –í–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–ª—é—á–∏. 

–í–ê–ñ–ù–û‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Ç–∏–ø "–ö–û–ú–ü–ê–ù–ò–Ø",–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ –æ–ø–ª–∞—Ç—É –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,–æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–µ—Ä–µ–π—Ç–∏ –±—É–¥–µ—Ç –ù–ï –í–û–ó–ú–û–ñ–ù–û‚ùóÔ∏è

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ SK_Avito_Bot. –ë—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µüòä –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É          üëâ @Manager_SK2_Avito üëà

–¢–∞–∫ –∂–µ –ø–æ–ø—Ä–æ—à—É –í–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª @SK2_Avito_Kanal_Bot —Ç–∞–º –±—É–¥—É—Ç –≤—ã—Ö–æ–¥–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏,–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—èüòä'''

    await bot.send_message(message.chat.id,text=text1)
    with open('video2.mp4', 'rb') as video_file:
        await bot.send_video(chat_id=message.chat.id, video=video_file)    
    text2 = '''–ò–ù–°–¢–†–£–ö–¶–ò–Ø ‚Ññ2 ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

–≠—Ç–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:


1. –î–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É ( –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞) 

2. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª - –ù—É–∂–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –≤–≤–µ—Å—Ç–∏ /start - –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π" - –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª"‚úÖ

3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—Éüí∞" –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.

4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø—É–Ω–∫—Ç—É "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞‚ûï"'''
    
    await bot.send_message(message.chat.id,text=text2)
    with open('video3.mp4', 'rb') as video_file:
        await bot.send_video(chat_id=message.chat.id, video=video_file)    

    text3 = '''–ò–ù–°–¢–†–£–ö–¶–ò–Ø ‚Ññ3 ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

–≠—Ç–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:


1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—É–Ω–∫—Ç—É "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞‚ûï"

2. –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–µ–±–µ –Ω–∞ –∞–≤–∏—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª "–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤" –≤–∫–ª–∞–¥–∫–∞ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", —Å–Ω–∏–∑—É –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏" –∏–ª–∏ –æ–Ω–∏ —É–∂–µ —Ç–∞–º –±—É–¥—É—Ç

3. –ö–æ–ø–∏—Ä—É–π—Ç–µ —Å–ª–µ–≤–∞ "–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è" –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω —Å–ª–∏—Ç–Ω–æ –ë–ï–ó –ü–†–û–ë–ï–õ–û–í‚ùóÔ∏è–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤ —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Å–æ–∑–¥–∞–ª–∏

4. –ü–æ—Å–ª–µ –∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ Client ID, Client secret. –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç–µ —ç—Ç–æ –≤ —á–∞—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ–∑–¥–∞–ª–∏.

5. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –∫–ª—é—á–∏ –∏ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ @SK2_Avito_bot –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤". –ï—Å–ª–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ç–∞–º —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –∑–Ω–∞—á–∏—Ç –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤—Å–µ –í–ï–†–ù–ûüëç

PS. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –Ω–æ —Ç–∞–º –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å.

–ë–æ–ª—å—à–∏—Ö –ø—Ä–æ–¥–∞–∂ –≤—Å–µ–ºüöÄ –ë—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ - –Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏üî•'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üíµ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',callback_data='check_vip'),types.InlineKeyboardButton(text='‚ûï –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–∏–µ ', callback_data='check_connection'))
    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',callback_data='check_money'))
    await bot.send_message(message.chat.id,text=text3,reply_markup=keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'check_vip')
async def check_vip(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    user_id = callback_query.message.chat.id
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT test_period FROM chats WHERE chat_id = ?', (user_id,))
    test_period_end = cursor.fetchone()
    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã –∏–∑–≤–ª–µ–∫–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    subscription_end_time = ''
    try:
        subscription_end_time = datetime.datetime.strptime(test_period_end[0], '%Y-%m-%d %H:%M:%S.%f')
    except Exception as e:
        print('Error:', e)
    
    if subscription_end_time is None:
        await bot.send_message(callback_query.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É?",reply_markup=keyboard)
        return


    
    current_time = datetime.datetime.now()
    if current_time >= subscription_end_time:
        try:
            # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        except exceptions.MessageToDeleteNotFound:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        sum = get_sum(tg_id=callback_query.message.chat.id)
        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',url=sum))
        await bot.send_message(
            callback_query.message.chat.id,
            text='–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?',
            reply_markup=keyboard,
        )
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    else:
        text = f"<b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b> {subscription_end_time.strftime('%Y-%m-%d %H:%M:%S')}"
        sum = get_sum(tg_id=callback_query.message.chat.id)
        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –∏–º–µ—é—â—É—Å—è –ø–æ–¥–ø–∏—Å–∫—É',url=sum))
        await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='html'
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'check_connection')
async def check_connection(callback_query: types.CallbackQuery):
    text = '''‚úã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!


–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è Avito.ru!


–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —Å–ª–µ–≤–∞, –ª–∏–±–æ –≤ –º–µ–Ω—é "–ü—Ä–æ—Ñ–∏–ª—å" –≤ –º–æ–±. –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!

Client_id –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏" –ø–æ —Å—Å—ã–ª–∫–µ - https://www.avito.ru/professionals/api

Client_secret –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏" –ø–æ —Å—Å—ã–ª–∫–µ - https://www.avito.ru/professionals/api

‚ùóÔ∏è–í–∞–∂–Ω–æ: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ / —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤!

–®–∞–±–ª–æ–Ω:
49702411
LgF3nrObD3ftikUcqPRO
lgyY2nOjvsN9rcskeqkcEV9L2oDxQWtmqa78Qgig'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'check_money')
async def check_money(callback_query: types.CallbackQuery):
    text = ''
    token = yoomoney_token
    client = Client(token)
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç–µ "–ø–æ—Å–ª–µ–¥–Ω–∏–º –º–µ—Å—è—Ü–µ–º"
    last_month_start = datetime.datetime.now() - datetime.timedelta(days=30)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = client.operation_history(label=callback_query.message.chat.id)
    
    print("List of operations:")
    print("Next page starts with: ", history.next_record)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
    text += "<b>–°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>\n\n"
    
    recent_operations = []
    
    for operation in history.operations:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π (—Å—Ç–∞—Ç—É—Å "success") –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞
        if operation.status == "success" and operation.datetime >= last_month_start:
            recent_operations.append(operation)
    
    if recent_operations:
        for i, recent_operation in enumerate(recent_operations):
            print(f"Operation {i + 1}:", recent_operation.operation_id)
            print("\tStatus     -->", recent_operation.status)
            print("\tDatetime   -->", recent_operation.datetime)
            print("\tTitle      -->", recent_operation.title)
            print("\tPattern id -->", recent_operation.pattern_id)
            print("\tDirection  -->", recent_operation.direction)
            print("\tAmount     -->", recent_operation.amount)
            print("\tLabel      -->", recent_operation.label)
            print("\tType       -->", recent_operation.type)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∫ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
            text += f"<b>–ü–ª–∞—Ç–µ–∂ #{recent_operation.operation_id}</b>\n"
            text += f"–°—Ç–∞—Ç—É—Å: {recent_operation.status}\n"
            text += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {recent_operation.datetime}\n"
            text += f"–°—É–º–º–∞: {recent_operation.amount}\n"
            text += f"–¢–∏–ø: {recent_operation.type}\n\n"
  
        how_much = len(recent_operations)
        subscription_end_date = get_subscription_end_date_from_database(callback_query.message.chat.id)
        if subscription_end_date is None or subscription_end_date < datetime.datetime.now():
        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Å—è—Ü –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
            one_month_later = datetime.datetime.now() + datetime.timedelta(days=30*how_much)
        
        # –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_subscription_end_date_in_database(callback_query.message.chat.id, one_month_later)
        
  
            
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ test_period_end –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ test_period_end –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
        # –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É –º–µ—Å—è—Ü –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        
        # –ù–∞–ø—Ä–∏–º–µ—Ä (–ø—Å–µ–≤–¥–æ–∫–æ–¥):
        # current_test_period_end = get_test_period_end_from_database(callback_query.message.chat.id)
        # new_test_period_end = current_test_period_end + timedelta(days=30)
        # update_test_period_end_in_database(callback_query.message.chat.id, new_test_period_end)
        
    else:
        text += "–£ –≤–∞—Å –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–ª–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_chat_menu')
async def back_chat_menu(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üíµ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',callback_data='check_vip'),types.InlineKeyboardButton(text='‚ûï –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–∏–µ ', callback_data='check_connection'))
    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',callback_data='check_money'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'video')
async def video_sos(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))

    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ callback_query.message.chat.id –∏ callback_query.message.message_id
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='https://youtu.be/GUPi_qfCXbs',
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'test_period_start')
async def test_start(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT test_period_end FROM clients WHERE id_telegram = ?', (user_id,))
    test_period_end = cursor.fetchone()

    if test_period_end is None:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        test_period_end = datetime.datetime.now() + datetime.timedelta(days=1)
        cursor.execute('INSERT INTO clients (id_telegram, test_period_end) VALUES (?, ?)', (user_id, test_period_end))
    else:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        test_period_end = datetime.datetime.now() + datetime.timedelta(days=1)
        cursor.execute('UPDATE clients SET test_period_end = ? WHERE id_telegram = ?', (test_period_end, user_id))

    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='back_main'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å.',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_wrapper')
async def back_wr(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üìπ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',callback_data='video'),types.InlineKeyboardButton(text='‚ûï –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Avito',callback_data='req_avito'))
    keyboard.add(types.InlineKeyboardButton(text='üï• –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥',callback_data='test_period'),types.InlineKeyboardButton(text='üìÉ –ê–≤—Ç–æ–æ—Ç—á–µ—Ç—ã',callback_data='auto_othcet'))
    keyboard.add(types.InlineKeyboardButton(text='ü§ñ –ë–æ—Ç –≤ —á–∞—Ç–µ',callback_data='vidoe'),types.InlineKeyboardButton(text='üì§ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ',callback_data='req_avito'))
    keyboard.add(types.InlineKeyboardButton(text='üíæ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–∞',callback_data='vidoe'),types.InlineKeyboardButton(text='üìë –°—Ü–µ–Ω–∞—Ä–∏–∏ —á–∞—Ç–æ–≤',callback_data='req_avito'))
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',callback_data='back_main'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'req_avito')
async def req_avito(callback_query: types.CallbackQuery):
    text = '''–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Avito –∫ –±–æ—Ç—É
–û–¥–∏–Ω –±–æ—Ç –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Avito, –Ω–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é 
¬´üí∞–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º¬ª.'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',callback_data='back_wrapper'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'auto_othcet')
async def auto_othcet(callback_query: types.CallbackQuery):
    text = '''–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º–∏
–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ï—Å—Ç—å 3 –≤–∏–¥–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤:

–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–æ–º–ø–∞–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É. –í "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏" –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∏ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

1. –ù–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", –¥–∞–ª–µ–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ Enter. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç, —Ç–æ –ø–∏—à–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å". –í—ã–π–¥–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–≤—Ç–æ–æ–≤—Ç–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã" 
 
2. –í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞—Ç–µ–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –∏ –≤—Ç–æ—Ä–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, —Ç–æ –≤–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ç–æ—Ä–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞, –∑–∞—Ç–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç, —Ç–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".
–ù–∞–ø—Ä–∏–º–µ—Ä: —É –í–∞—Å –∫–∞–∫–∞—è-—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è, –í—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –ß—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏" –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ (–ú–°–ö) "18:00" –∏ –∑–∞—Ç–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è "10:00" , –¥–∞–ª–µ–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. 

3. –ù–∞ —Ç—Ä–∏–≥–≥–µ—Ä. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å, –µ—Å–ª–∏ —É–≤–∏–¥–∏—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–∑–Ω–∞—á–∏–ª–∏. –ò—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: –∞–π—Ñ–æ–Ω, iphone, —è–±–ª–æ–∫–æ —Ñ–æ–Ω. –ò –Ω–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã, –±–æ–ª—å—à–∏–µ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã. –ï—Å–ª–∏ –±–æ—Ç —É–≤–∏–¥–∏—Ç —ç—Ç–æ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞, –æ–Ω —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç–∏—Ç –µ–º—É –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –ï—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É. –ò–ª–∏ –≤–æ–≤—Å–µ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥, –≤—ã–¥–∞–≤–∞—è –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É ¬´ü§ñ–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã¬ª, –¥–∞–ª–µ–µ ¬´‚ûï–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç¬ª –∏ –¥–∞–ª–µ–µ –ø–æ—à–∞–≥–æ–≤–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.

–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω, –Ω–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É ¬´ü§ñ–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã¬ª, –¥–∞–ª–µ–µ ¬´üëÄ–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã¬ª –∏ –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–£–¥–∞–ª–∏—Ç—å¬ª –ø–æ–¥ –Ω–µ–Ω—É–∂–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º.

–í–∫–ª/–í—ã–∫–ª
–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–≤–∫–ª" –∏–ª–∏ "–≤—ã–∫–ª"

–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–∏–∑–º–µ–Ω–∏—Ç—å" –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≥–æ –≤—Ä–µ–º—è –∏ —Å–∞–º —Ç–µ–∫—Å—Ç.'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',callback_data='back_wrapper'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'test_period')
async def test_period(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for filename in os.listdir(image_folder):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            with open(os.path.join(image_folder, filename), 'rb') as image_file:
                await callback_query.message.answer_photo(photo=image_file)

    text = '''–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
    –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–µ—Ç—Å—è –Ω–∞ —Ä–æ–≤–Ω–æ 24 —á–∞—Å–∞, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –í—ã —É—Å–ø–µ–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. 

    –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –í–∞—à—É —Ä–∞–±–æ—Ç—É

    –ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –Ω—É–∂–Ω–æ:
    1. –ù–∞–∂–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" (—Ä–∏—Å.1)
    2. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –≤–∞—Å —Å–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –æ –≤—ã–¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ. (—Ä–∏—Å.2)
    3. –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞  (—Ä–∏—Å.3)
    4. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.'''
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.send_message(callback_query.message.chat.id, text=text,reply_markup=keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'sos')
async def pomosh(callback_query: types.CallbackQuery):
    text = '''–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üìÉ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é',callback_data='back_wrapper'),types.InlineKeyboardButton(text='üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',callback_data='sos_with_me'))
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='back_main'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'sos_with_me')
async def req_avito(callback_query: types.CallbackQuery):
    text = '''ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã
TiqAvito –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 24 / 
‚ÄºÔ∏è –û—Ç–≤–µ—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 00:00. –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!

üì§@Manager_Tiq_Shopüì§'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',callback_data='sos'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'auto_answera')
async def auto_answera(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã',callback_data='r'),types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–≤–æ–æ—Ç–≤–µ—Ç',callback_data='add_answer'))
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='back_main'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'add_answer')
async def add_answer(callback_query: types.CallbackQuery):
    text = '''–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ‚ÅâÔ∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –±–æ—Ç—É. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –≤—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤ –∫–∞–∂–¥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –±—ã–ª–∞ —Å–≤–æ—è –ª–æ–≥–∏–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –≤ Telegram –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',callback_data='first_message'),types.InlineKeyboardButton(text='–í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏',callback_data='time_message'))
    keyboard.add(types.InlineKeyboardButton(text='–¢—Ä–∏–≥–≥–µ—Ä—ã',callback_data='triggers'))
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='back_main'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    ) 

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_main')
async def back_main(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üìπ–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',callback_data='video'),types.InlineKeyboardButton(text='üììC–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',callback_data='spisok'))
    keyboard.add(types.InlineKeyboardButton(text='ü§ñ–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã',callback_data='auto_answera'),types.InlineKeyboardButton(text='üÜò–ü–æ–º–æ—â—å',callback_data='sos'))
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=keyboard
    ) 
@dp.message_handler(commands='unread')
async def unread_data(message: types.Message):
    global current_page2
    global current_page_message_id2
    # Define the number of contacts to display per page
    contacts_per_page = 6
    keyboard = types.InlineKeyboardMarkup(row_width=3)

    # Clear the unique_user_names set for the current page
    unique_user_names.clear()
    user_id = get_user_id(message.chat.id)
    token = get_token(message.chat.id)
    avito_data = get_avito_unread_data(token=token,user_id=user_id)

    if avito_data:
        user_data_list = []

        for chat in avito_data["chats"]:
            for user in chat["users"]:
                user_name = user["name"]
                user_id = user['id']  # –ü–æ–ª—É—á–∞–µ–º user_id, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                chat_id = chat["id"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
                if user_name not in unique_user_names:
                    unique_user_names.add(user_name)
                    user_data_list.append({"user_id": user_id, "username": user_name, "chat_id": chat_id})

        # Define the number of contacts to display per page
        contacts_per_page = 6

        # Calculate the total number of pages
        total_pages = (len(user_data_list) + contacts_per_page - 1) // contacts_per_page

        # Check if the current page is out of bounds
        if current_page2 >= total_pages:
            current_page2 = 0

        # Calculate the start and end indices for slicing
        start_index = current_page2 * contacts_per_page
        end_index = (current_page2 + 1) * contacts_per_page

        # Get the contacts for the current page
        contacts_on_page = user_data_list[start_index:end_index]

        # Create a list of buttons for the contacts on the current page
        buttons = []
        for user_data in contacts_on_page:
            user_name = user_data["username"]
            cleaned_user_name = clean_callback_data(user_name)
            cleaned_user_name = cleaned_user_name[:64]
            cleaned_user_name+=' üë§'
            user_id = user_data["user_id"]
            chat_id = user_data["chat_id"]
            button = types.InlineKeyboardButton(text=cleaned_user_name, callback_data=f'unread_send^{cleaned_user_name}^{chat_id}^{user_id}')
            buttons.append(button)

        # Create the "Next" and "Back" buttons for page navigation
        navigation_buttons = []
        if total_pages > 1:
            if current_page2 > 0:
                navigation_buttons.append(types.InlineKeyboardButton(text="Back ‚¨ÖÔ∏è", callback_data=f'unred_page_{current_page2 - 1}'))
            if current_page2 < total_pages - 1:
                navigation_buttons.append(types.InlineKeyboardButton(text="Next ‚û°Ô∏è", callback_data=f'unread_page_{current_page2 + 1}'))

        # Add the navigation buttons to the keyboard
        if navigation_buttons:
            keyboard.add(*navigation_buttons)
        if buttons:
            keyboard.add(*buttons)

        # Check if there's an existing message to edit
        if current_page_message_id2:
            try:
                await bot.edit_message_text(chat_id=message.chat.id, message_id=current_page_message_id2,
                                            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
            except aiogram.utils.exceptions.MessageNotModified:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É
                pass
        else:
            # Send the initial message with the contacts and navigation buttons
            message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
            current_page_message_id2 = message.message_id

    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Avito.")

@dp.message_handler(Command("data") & ChatTypeFilter(types.ChatType.GROUP))
async def get_data(message: types.Message, just = None):
    global current_page
    global current_page_message_id
    # Define the number of contacts to display per page
    contacts_per_page = 6
    keyboard = types.InlineKeyboardMarkup(row_width=3)

    # Clear the unique_user_names set for the current page
    unique_user_names.clear()
    user_id = get_user_id(message.chat.id)
    token = get_token(message.chat.id)

    avito_data = get_avito_data(token=token,user_id=user_id)
    if avito_data:
        user_data_list = []

        for chat in avito_data["chats"]:
            for user in chat["users"]:
                user_name = user["name"]
                user_id = user['id']  # –ü–æ–ª—É—á–∞–µ–º user_id, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                chat_id = chat["id"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
                if user_name not in unique_user_names:
                    unique_user_names.add(user_name)
                    user_data_list.append({"user_id": user_id, "username": user_name, "chat_id": chat_id})

        # Define the number of contacts to display per page
        contacts_per_page = 6

        # Calculate the total number of pages
        total_pages = (len(user_data_list) + contacts_per_page - 1) // contacts_per_page

        # Check if the current page is out of bounds
        if current_page >= total_pages:
            current_page = 0

        # Calculate the start and end indices for slicing
        start_index = current_page * contacts_per_page
        end_index = (current_page + 1) * contacts_per_page

        # Get the contacts for the current page
        contacts_on_page = user_data_list[start_index:end_index]

        # Create a list of buttons for the contacts on the current page
        buttons = []
        for user_data in contacts_on_page:
            user_name = user_data["username"]
            cleaned_user_name = clean_callback_data(user_name)
            name = cleaned_user_name + ' üë§'

            user_id = user_data["user_id"]
            chat_id = user_data["chat_id"]
            button = types.InlineKeyboardButton(text=name, callback_data=f'send^{cleaned_user_name}^{user_id}^{chat_id}')
            buttons.append(button)

        # Create the "Next" and "Back" buttons for page navigation
        navigation_buttons = []
        if total_pages > 1:
            if current_page > 0:
                navigation_buttons.append(types.InlineKeyboardButton(text="Back ‚¨ÖÔ∏è", callback_data=f'page_{current_page - 1}'))
            if current_page < total_pages - 1:
                navigation_buttons.append(types.InlineKeyboardButton(text="Next ‚û°Ô∏è", callback_data=f'page_{current_page + 1}'))

        # Add the navigation buttons to the keyboard
        if navigation_buttons:
            keyboard.add(*navigation_buttons)
        if buttons:
            keyboard.add(*buttons)

        # Check if there's an existing message to edit
        if current_page_message_id and just==None:

            try:
                await bot.edit_message_text(chat_id=message.chat.id, message_id=current_page_message_id,
                                            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
            except aiogram.utils.exceptions.MessageNotModified:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await bot.delete_message(chat_id=message.chat.id, message_id=current_page_message_id)
                message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                current_page_message_id = message.message_id
        elif current_page_message_id and just=='response':
                try:
                    await bot.send_message(chat_id=message.chat.id, message_id=current_page_message_id,
                                                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                except aiogram.utils.exceptions.MessageNotModified:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await bot.delete_message(chat_id=message.chat.id, message_id=current_page_message_id)
                    message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                    current_page_message_id = message.message_id
        else:
            # Send the initial message with the contacts and navigation buttons
            message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
            current_page_message_id = message.message_id

    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Avito.")




# Add a callback handler for page navigation
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('page_'))
async def page_navigation_callback(callback_query: types.CallbackQuery):
    global current_page  # Declare that we are using the global current_page variable
    global current_page_message_id  # Declare a global variable to store the message ID
    page_number = int(callback_query.data.split('_')[1])
    current_page = page_number  # Update the current page
    # Trigger a refresh of the data
    await get_data(callback_query.message)




# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
# @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send_'))
# async def process_callback(callback_query: types.CallbackQuery):
#     user_name = callback_query.data.replace('send_', '')
#     await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}")




@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send^'))
async def process_callback(callback_query: types.CallbackQuery):
    user_data = callback_query.data.replace('send^', '').split('^')
    chat_id = ''
    user_id = ''
    if len(user_data)>2:
        chat_id, user_id = user_data[1], user_data[2]
    else:
        chat_id, user_id = user_data[0], user_data[1]
    # –°–æ–∑–¥–∞–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É inline
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="üí¨–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f'view-chat^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'back'))


    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )

    
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('seend^'))
async def process_callback2(callback_query: types.CallbackQuery):
    user_data = callback_query.data.replace('send^', '').split('^')
    chat_id = ''
    user_id = ''
    if len(user_data)>2:
        chat_id, user_id = user_data[1], user_data[2]
    else:
        chat_id, user_id = user_data[0], user_data[1]
    # –°–æ–∑–¥–∞–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É inline
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="üí¨–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f'view-chat^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'back'))


    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )


    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('back','view-chat^', 'send-message^', 'last-message^')))
async def action_callback(callback_query: types.CallbackQuery,state: FSMContext):
    action_data = callback_query.data
    chat_text = ''
    action_data = callback_query.data.split('^')
    action = action_data[0]
    if len(action_data)>2:
        user_id, chat_id  = action_data[1], action_data[2]
    else:
        pass

    if action == 'back':
        global current_page  # Declare that we are using the global current_page variable
        global current_page_message_id  # Declare a global variable to store the message ID
        callback_query.data = f'page_{current_page}'
        page_number = int(callback_query.data.split('_')[1])
        current_page = page_number  # Update the current page
        # Trigger a refresh of the data
        await get_data(callback_query.message,just='responce')

    elif action == 'view-chat':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç"
        resp = get_user_id(callback_query.message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(callback_query.message.chat.id)
        data = get_avito_messages(user_id=resp, chat_id=chat_id, token=token)
        messages = data['messages'][:10]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞


        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for message in reversed(messages):
            message_type = message['type']
            sender = "<b>üë§ –í—ã</b>" if message['direction'] == 'out' else "<b>üì¨ –í–∞–º</b>"

            if message_type == 'text':
                text = message['content']['text']
                created_timestamp = message['created']
                created_date = datetime.datetime.fromtimestamp(created_timestamp).strftime('%A %d %B')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 27 —Å–µ–Ω—Ç—è–±—Ä—è"
                chat_text += f"{sender} ({created_date}): {text}\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'link':
                link_text = message['content']['link']['text']
                link_url = message['content']['link']['url']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É: {link_text} ({link_url})\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'location':
                location_data = message['content']['location']
                location_text = location_data['text']
                location_title = location_data['title']
                location_lat = location_data['lat']
                location_lon = location_data['lon']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é:\n{location_text}\n({location_title}, –®–∏—Ä–æ—Ç–∞: {location_lat}, –î–æ–ª–≥–æ—Ç–∞: {location_lon})\n"
            elif message_type == 'photo':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é(–∏)\n"
            elif message_type == 'video':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∏–¥–µ–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ\n"
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫–∏–µ –∫–∞–∫ quick_reply –∏ –¥—Ä—É–≥–∏–µ, –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

        token = get_token(callback_query.message.chat.id)

        mark_chat_as_read(resp, chat_id, token=token)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message^{chat_id}^{user_id}'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'send^{chat_id}^{user_id}'))
        await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=chat_text,
        parse_mode='html',
        reply_markup=keyboard
    )
        callback_query.data = f'send^{chat_id}^{user_id}'

        #await process_callback(callback_query=callback_query)

        # # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –æ–±—ä–µ–¥–∏–Ω—è—è —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # chat_text = "\n".join([message['content']['text'] for message in data['messages']])

        # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        # await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_name}\n\n{chat_text}")

    elif action == 'send-message':

    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ user_id –∏–∑ callback_data
        user_id, chat_id = action_data[1], action_data[2]
        print(user_id,chat_id)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await MyStates.waiting_for_text.set()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        async with state.proxy() as data:
            data['chat_id'] = chat_id
            data['user_id'] = user_id
            data['telegram_chat_id'] = callback_query.message.chat.id  # –î–æ–±–∞–≤–ª—è–µ–º chat_id Telegram —á–∞—Ç–∞


@dp.message_handler(state=MyStates.waiting_for_text)
async def process_text(message: Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = data['chat_id']
        user_id = data['user_id']
        telegram_chat_id = data['telegram_chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id Telegram —á–∞—Ç–∞
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        resp = get_user_id(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(message.chat.id)

        send_message(chat_id=chat_id, user_id=resp, text=message.text, token=token)
        mark_chat_as_read(resp, chat_id, token=token)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑", callback_data=f'send-message^{chat_id}^{user_id}'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'seend^{chat_id}^{user_id}'))
        await bot.send_message(
            chat_id=telegram_chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat_id —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!',
            parse_mode='html',
            reply_markup=keyboard
        )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()



@dp.message_handler(content_types=types.ContentTypes.TEXT, chat_type=types.ChatType.GROUP)
async def check_pattern(message: types.Message):
    if message.text.startswith("–®–∞–±–ª–æ–Ω"):
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–®–∞–±–ª–æ–Ω", –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        lst = message.text.split('\n')
        print(lst)
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º chat_id
            cursor.execute('SELECT id FROM chats WHERE chat_id = ?', (message.chat.id,))
            existing_chat = cursor.fetchone()
            print('exitsting_chat',existing_chat)
            if existing_chat != None:
                print('ggfgfgfg')
                cursor.execute('SELECT id, test_period FROM chats WHERE chat_id = ?', (message.chat.id,))
                time = cursor.fetchone()
                test_period_str = time[1]
                print(test_period_str)
                test_period_str = test_period_str.split('.')[0]  # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å —Å–µ–∫—É–Ω–¥—ã
                test_period = datetime.datetime.strptime(test_period_str, '%Y-%m-%d %H:%M:%S')
                if test_period <= datetime.datetime.now():
                    keyboard = types.InlineKeyboardMarkup()
                    sum = get_sum(tg_id=message.chat.id)
                    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',url=sum))
                    await message.reply(f"–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",reply_markup=keyboard)
                else:
                    token = set_personal_token(client_id=lst[2],client_secret=lst[3])
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ chats
                    cursor.execute('UPDATE chats SET id_avito = ?, client_id = ?, client_secret = ?, token = ?  WHERE chat_id = ?',
                                (lst[1], lst[2], lst[3], token, message.chat.id))
                    conn.commit()
                    asyncio.create_task(background_task(message.chat.id))
            else:
                if test_period <= datetime.datetime.now():
                    keyboard = types.InlineKeyboardMarkup()
                    sum = get_sum(tg_id=message.chat.id)
                    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',url=sum))
                    await message.reply(f"–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",reply_markup=keyboard)
                else:
                    token = set_personal_token(client_id=lst[2],client_secret=lst[3])
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    cursor.execute('INSERT INTO chats (chat_id, id_avito, client_id, client_secret,token) VALUES (?, ?, ?, ?, ?)',
                                (message.chat.id, lst[1], lst[2], lst[3], token))
                    
                    conn.commit()
                    asyncio.create_task(background_task(message.chat.id))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö


        except:
            pass
            
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        conn.close()

    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–®–∞–±–ª–æ–Ω", –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '–®–∞–±–ª–æ–Ω'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /account_info
@dp.message_handler(commands=['account_info'])
async def get_account_info(message: types.Message):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f'view_balance'),types.InlineKeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É ", callback_data=f'chang_balance'))
        keyboard.add(types.InlineKeyboardButton(text="üï∏ –ü–æ—Å–º–æ—Ç–æ—Ä–µ—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã ", url='https://yoomoney.ru/transfer/quickpay?requestId=353339313234373332315f64636536343062613739396163313832353138336465376132343935653739633136313830646464'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'back_admin'))
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=keyboard)
    except Exception as e:
        print('Error:', str(e))

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('view_balance','chang_balance','view_site')))
async def action_callback(callback_query: types.CallbackQuery,state: FSMContext):
    if callback_query.data == 'view_balance':
        try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ÆMoney
            user = client.account_info()
            account_info = (
                f"Account number: <b>{user.account}</b>\n"
                f"Account balance: {user.balance} {user.currency}\n"
                f"Account status: {user.account_status}\n"
                f"Account type: {user.account_type}\n"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Telegram
            await callback_query.message.reply(account_info)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö
            cards = user.cards_linked
            if len(cards) != 0:
                card_info = "Information about linked bank cards:\n"
                for card in cards:
                    card_info += f"{card.pan_fragment} - {card.type}\n"
                await callback_query.message.reply(card_info,parse_mode='html')
            else:
                await callback_query.message.reply("No card is linked to the account")

        except Exception as e:
            await callback_query.message.reply(f"An error occurred: {str(e)}")
    elif callback_query.data == 'chang_balance':
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await YooMoneySum.waiting_fot_sum.set()



    else:
        pass

@dp.message_handler(state=YooMoneySum.waiting_fot_sum)
async def process_sum(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—É
        user_input = message.text
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ)
        sum_to_set = float(user_input)

        # –ò–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É –≤ Quickpay
        redirected_url = change_sum(sum_to_set)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.answer(f"–°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {sum_to_set} —Ä—É–±. –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {redirected_url}")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await state.finish()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã.")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    text = message.text

    if text.count(' ')==2:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        text = text.replace(' ','')
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_telegram = message.chat.id  # –ü—Ä–∏–º–µ—Ä id_telegram
        client_id = get_user_id(message.chat.id)   # –ü—Ä–∏–º–µ—Ä client_id

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º id_telegram
        select_query = 'SELECT * FROM clients WHERE id_telegram = ?'
        cursor.execute(select_query, (id_telegram,))

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        existing_record = cursor.fetchone()

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç–µ –µ—ë client_id
        if existing_record:
            update_query = 'UPDATE clients SET client_id = ? WHERE id_telegram = ?'
            cursor.execute(update_query, (text, id_telegram))
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é
            insert_query = 'INSERT INTO clients (id_telegram, client_id) VALUES (?, ?)'
            cursor.execute(insert_query, (id_telegram, client_id))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()
    else:
        await bot.send_message(message.chat.id,'–¢—ã –Ω–∞–ø–∏—Å–∞–ª</>')

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('view-chat-group^','send-message-group^')))
async def action_callback(callback_query: types.CallbackQuery,state: FSMContext):
    action_data = callback_query.data
    action_data = callback_query.data.split('^')
    action = action_data[0]
    chat_id = ''
    user_id = ''
    if len(action_data)>2:
        user_id, chat_id= action_data[1], action_data[2]
    else:
        pass
    if action == 'back':
        global current_page  # Declare that we are using the global current_page variable
        global current_page_message_id  # Declare a global variable to store the message ID
        callback_query.data = f'page_{current_page}'
        page_number = int(callback_query.data.split('_')[1])
        current_page = page_number  # Update the current page
        # Trigger a refresh of the data
        await get_data(callback_query.message,just='responce')
    elif action == 'send-message-group':

    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ user_id –∏–∑ callback_data
        user_id, chat_id = action_data[1], action_data[2]
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await MyStatesGroup.waiting_for_text.set()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        async with state.proxy() as data:
            data['chat_id'] = chat_id
            data['user_id'] = user_id
            data['telegram_chat_id'] = callback_query.message.chat.id  # –î–æ–±–∞–≤–ª—è–µ–º chat_id Telegram —á–∞—Ç–∞




    elif action == 'view-chat-group':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç"
        resp = get_user_id(callback_query.message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(callback_query.message.chat.id)
        data = get_avito_messages(user_id=resp, chat_id=chat_id, token=token)
        chat_text = ""
        messages = data['messages'][:10]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for message in reversed(messages):
            message_type = message['type']
            sender = "<b>üë§ –í—ã</b>" if message['direction'] == 'out' else "<b>üì¨ –í–∞–º</b>"

            if message_type == 'text':
                text = message['content']['text']
                created_timestamp = message['created']
                created_date = datetime.datetime.fromtimestamp(created_timestamp).strftime('%A %d %B')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 27 —Å–µ–Ω—Ç—è–±—Ä—è"
                chat_text += f"{sender} ({created_date}): {text}\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'link':
                link_text = message['content']['link']['text']
                link_url = message['content']['link']['url']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É: {link_text} ({link_url})\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'location':
                location_data = message['content']['location']
                location_text = location_data['text']
                location_title = location_data['title']
                location_lat = location_data['lat']
                location_lon = location_data['lon']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é:\n{location_text}\n({location_title}, –®–∏—Ä–æ—Ç–∞: {location_lat}, –î–æ–ª–≥–æ—Ç–∞: {location_lon})\n"
            elif message_type == 'photo':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é(–∏)\n"
            elif message_type == 'video':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∏–¥–µ–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ\n"
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫–∏–µ –∫–∞–∫ quick_reply –∏ –¥—Ä—É–≥–∏–µ, –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

        token = get_token(callback_query.message.chat.id)

        mark_chat_as_read(resp, chat_id, token=token)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message-group^{chat_id}^{user_id}'))
        await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=chat_text,
        parse_mode='html',
        reply_markup=keyboard
    )
        callback_query.data = f'send^{chat_id}^{user_id}'
    


@dp.message_handler(state=MyStatesGroup.waiting_for_text)
async def process_text(message: Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = data['chat_id']
        user_id = data['user_id']
        telegram_chat_id = data['telegram_chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id Telegram —á–∞—Ç–∞
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        resp = get_user_id(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(message.chat.id)
        send_message(chat_id=chat_id, user_id=resp, text=message.text, token=token)
        mark_chat_as_read(resp, chat_id, token=token)
        print('–º–æ–∏ –¥–∞–Ω–Ω—ã–µ',chat_id,user_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑", callback_data=f'send-message-group^{chat_id}^{user_id}'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'seend^{chat_id}^{user_id}'))
        await bot.send_message(
            chat_id=telegram_chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat_id —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!',
            parse_mode='html',
            reply_markup=keyboard
        )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def get_unread_messages(chat_id):
    avito_id = get_user_id(chat_id)
    token = get_token(chat_id)
    json_data = get_unread_messagef_avito(token=token, user_id=avito_id)
    ch_id = ''
    # –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    sent_message_ids = sent_messages.get(chat_id, [])
            
    
    if "chats" in json_data:
        for chat in json_data["chats"]:
            message_id = chat["last_message"]["id"]
            if message_id not in sent_message_ids:
                sent_message_ids.append(message_id)
                sent_messages[chat_id] = sent_message_ids
                ch_id = chat['id']
                title = chat["context"]["value"]["title"]
                price_string = chat["context"]["value"]["price_string"]
                url = chat["context"]["value"]["url"]
                city = chat["context"]["value"]["location"]["title"]

                users = chat["users"]
                author_name = ""
                client_name = ""
                for user in users:
                    if user["id"] == chat["last_message"]["author_id"]:
                        author_name = user["name"]
                    else:
                        client_name = user["name"]

                last_message_text = chat["last_message"]["content"]["text"]

                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                response_message = (
                f"–¢–æ–≤–∞—Ä: {title} {price_string}\n"
                f"–ê–≤—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞: {client_name}\n"
                f"–ì–æ—Ä–æ–¥: {city}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {author_name}\n\n"
                f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{last_message_text}\n\n"
                f"[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]({url})"
            )
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message-group^{avito_id}^{ch_id}'),types.InlineKeyboardButton(text="üí¨–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f'view-chat-group^{avito_id}^{ch_id}'))
                await bot.send_message(chat_id, text=response_message,parse_mode=types.ParseMode.MARKDOWN,reply_markup=keyboard)


async def background_task(chat_id):
    while True:
        print("Checking for unread messages...")
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await get_unread_messages(chat_id)
        await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º


if __name__ == '__main__':
    make_db()
    executor.start_polling(dp, skip_updates=True)