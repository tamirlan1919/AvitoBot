from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
import sqlite3
import aiogram
from aiogram import executor
import datetime
from aiogram.types import Message
import asyncio
from contol import *
from avito_api import *
from math import ceil
from aiogram.utils import markdown
from clean import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from state import *
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MemoryStorage
from aiogram.utils import executor
from aiogram.utils import markdown as md
from aiogram.utils import executor
from aiogram import executor
from yoomoney import Client
import os
from aiogram import types
from aiogram.utils import exceptions
from money_cart import get_sum
from teext import *
from config import *
from aiogram.dispatcher.filters import Command, ChatTypeFilter
yoomoney_token = "4100117394518969.25C11A278171A9D98CF57B29E20869FE7175F8E5F0D82C642CB12B819214769229B792D693CD7A205D5D8B524294B1E710CECA73FB581A110CD748405B3A3709592F767FB683ACCE256C92453C4EA831F0E9EBA02063DF8DBA8728EE9B2A2CC60AA1EAD2AF79160F273D90F23C06E6E66B7B874261A33FD1BBA66C0A96297EAD"

client = Client(yoomoney_token)
# –í–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
BOT_TOKEN = '6657768547:AAE4-RHRZtnIJ6lumQVqBrvmP7tUsvVFhG8'

users_per_page_2 = 3
current_page_2 = 1
total_pages_2 = 1

week_days_list = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

day_mapping = {
    'MON': '–ü–ù',
    'TUE': '–í–¢',
    'WED': '–°–†',
    'THU': '–ß–¢',
    'FRI': '–ü–¢',
    'SAT': '–°–ë',
    'SUN': '–í–°'
}

selected_days_dict ={}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN,disable_web_page_preview=True)

memory_storage = MemoryStorage()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MemoryStorage
dp = Dispatcher(bot,storage=memory_storage)
dp.middleware.setup(LoggingMiddleware())
sent_messages = {}
sent_welcome_messages = {}






# –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
unique_user_names = set()
image_folder = 'images/test_period'
image_folder2 = 'images/bot'
image_folder3 = 'images/to_answer'
image_folder4 = 'images/to_show'
image_folder5 = 'images/data'


async def check_new_messages(message: types.Message):
    while True:
        try:
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
            user_id = get_user_id(message.chat.id)
            token = get_token(message.chat.id)
            avito_data = await get_avito_unread_data(token=token, user_id=user_id)

            if avito_data and 'users' in avito_data:
                new_message_count = len(avito_data['users'])
                if new_message_count > 0:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è,
                    # –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Ö.
                    await bot.send_message(message.chat.id, f'–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {new_message_count}')

        except Exception as e:
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
            pass
        await asyncio.sleep(10)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)


@dp.message_handler(Command("start") & ChatTypeFilter(types.ChatType.PRIVATE),state='*')
async def start(message: types.Message,state:FSMContext):
    await state.finish()
    text = start_text
    await bot.send_message(message.chat.id,text=text,parse_mode='html')
    with open('video.gif', 'rb') as video_file:
        await bot.send_video(chat_id=message.chat.id, video=video_file)
    text1 = instruct_first
    user_id = message.chat.id
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    row = ''
    try:
        cursor.execute('SELECT * FROM clients WHERE id_telegram = ?', (user_id,))
        row = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    except Exception as e:
        print("Error:", e)
        row = None
    if row is None:
        cursor.execute('INSERT INTO clients (id_telegram) VALUES (?)', (user_id,))
        conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    else:
        pass

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    if message.chat.id in admin_ids:
        keyboard.add(
            types.InlineKeyboardButton(text='üé• –í–∏–¥–µ–æ', callback_data='video'),
            types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='spisok')
        )
        keyboard.add(
            types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', callback_data='auto_answera'),
            types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='sos')
    )
        keyboard.add(types.InlineKeyboardButton(text='üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',callback_data='acc_back'))
    else:
        keyboard.add(
            types.InlineKeyboardButton(text='üé• –í–∏–¥–µ–æ', callback_data='video'),
            types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='spisok')
        )
        keyboard.add(
            types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', callback_data='auto_answera'),
            types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='sos')
    )
    keyboard.add(types.InlineKeyboardButton(text='üí∞ –í—ã–ø–ª–∞—Ç—ã', callback_data='send_money'))
    keyboard.add(types.InlineKeyboardButton(text='üí≥ –ë–∞–ª–∞–Ω—Å',callback_data='my_balance'))


    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT test_period_end FROM clients WHERE id_telegram = ?', (user_id,))
        test_period_end = cursor.fetchone()
        if test_period_end[0] is None:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(types.InlineKeyboardButton(text='üïí –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='test_period_start'))
    except:
        pass
    conn.close()


    await bot.send_message(message.chat.id, text=text1,reply_markup=keyboard,parse_mode='html')

@dp.message_handler(Command("start") & ChatTypeFilter(types.ChatType.GROUP),state='*')
async def start_group(message: types.Message,state:FSMContext):
    await state.finish()
    chat_id = message.chat.id
    user_id_telegram = message.from_user.id
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É chats
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # Check if the test_period exists in the clients table
            cursor.execute('SELECT test_period_end FROM clients WHERE id = ?', (user_id[0],))
            test_per = cursor.fetchone()
            if test_per[0] is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ acc_id –∏ chat_id
                cursor.execute('SELECT id FROM chats WHERE acc_id = ? AND chat_id = ?', (user_id[0], chat_id))
                existing_chat = cursor.fetchone()

                if not existing_chat:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É chats
                    cursor.execute('INSERT INTO chats (chat_id, acc_id, test_period, link_rel, money) VALUES (?, ?, ?, ?, ?)', (chat_id, user_id[0], test_per[0], message.chat.id, 0))
                    conn.commit()
                    cursor.execute('INSERT INTO check_status (chat_id, status) VALUES (?, ?)', (chat_id, 0))
                    conn.commit()
                    cursor.execute('INSERT INTO user_money_pay (chat_id, tg_id) VALUES (?, ?)', (chat_id, user_id_telegram))
                    conn.commit()
                    text1 = before_reading
                    await bot.send_message(message.chat.id,'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! ü§ñ')
                    #await bot.send_message(message.chat.id,text='text1')
                    with open('video2.mp4', 'rb') as video_file:
                        await bot.send_video(chat_id=message.chat.id, video=video_file)    
                    text2 = instruct_second
                    
                    await bot.send_message(message.chat.id,text=text2,parse_mode='html')
                    with open('video3.mp4', 'rb') as video_file:
                        await bot.send_video(chat_id=message.chat.id, video=video_file)    

                    text3 = instruct_third
                    await bot.send_message(message.chat.id,text=text3)
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text='üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',callback_data='check_vip'))
                    keyboard.add(types.InlineKeyboardButton(text='üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏', callback_data='check_money'))
                    keyboard.add(types.InlineKeyboardButton(text='‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',callback_data='check_connection'))
                    keyboard.add(types.InlineKeyboardButton(text='üîå –†–µ—Ñ —Å—Å—ã–ª–∫–∞',callback_data='check_ref'))
                    keyboard.add(types.InlineKeyboardButton(text="ü§ñ –ö –±–æ—Ç—É", url='https://t.me/tiqavito_bot'))


                    await bot.send_message(message.chat.id,text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',reply_markup=keyboard)
                else:
                    text1 = before_reading
                    await bot.send_message(message.chat.id,'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! ü§ñ')
                    #await bot.send_message(message.chat.id,text='text1')
                    with open('video2.mp4', 'rb') as video_file:
                        await bot.send_video(chat_id=message.chat.id, video=video_file)    
                    text2 = instruct_second
                    
                    await bot.send_message(message.chat.id,text=text2,parse_mode='html')
                    with open('video3.mp4', 'rb') as video_file:
                        await bot.send_video(chat_id=message.chat.id, video=video_file)    

                    text3 = instruct_third
                    await bot.send_message(message.chat.id,text=text3)
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text='üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',callback_data='check_vip'))
                    keyboard.add(types.InlineKeyboardButton(text='üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏', callback_data='check_money'))
                    keyboard.add(types.InlineKeyboardButton(text='‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',callback_data='check_connection'))
                    keyboard.add(types.InlineKeyboardButton(text='üîå –†–µ—Ñ —Å—Å—ã–ª–∫–∞',callback_data='check_ref'))
                    keyboard.add(types.InlineKeyboardButton(text="ü§ñ –ö –±–æ—Ç—É", url='https://t.me/tiqavito_bot'))



                    await bot.send_message(message.chat.id,text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',reply_markup=keyboard)
            else:
                # Send an alert message to the user to connect a test period
                await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –≥—Ä—É–ø–ø–µ')
    except:
        pass

    conn.close()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'send_money')
async def send_money(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    user_id_telegram = callback_query.message.chat.id

    try:

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ user_id, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É user_id
            cursor.execute('SELECT * FROM chats WHERE acc_id = ?', (user_id[0],))
            chats = cursor.fetchall()
            if chats:
                    # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É acc_id
                for chat in chats:
                    chat_id = chat[1]
                    id_avito = chat[2]
                    client_id = chat[3]
                    client_secret = chat[4]
                    token = chat[5]
                    test_period = chat[6]
                    token = get_token(chat_id)
                    profile = await get_profile(token=token)
                    profile_name = profile['name']
                    profile_url = profile['profile_url']
                    chat_info = await bot.get_chat(chat_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <code>{chat_info.title}</code>\n"
                        f"<b>–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{user_id_telegram}</code>\n"
                        f"<b>Client_id:</b> <code>{client_id}</code>\n"
                        f"<b>Client_secret:</b> <code>{client_secret}</code>"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"send_chat^{chat_id}"))
                    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

                    await bot.send_message(callback_query.message.chat.id, text=message_text, parse_mode="html", reply_markup=keyboard)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))

                await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)
    except:
        await bot.answer_callback_query(callback_query.id, text='–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –≤ —á–∞—Ç–µ', show_alert=True)
     

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send_chat'))
async def check_vip(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('^')
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_main'))  # Update this line    
    cursor.execute('SELECT money FROM chats WHERE chat_id = ?', (data[1],))
    money = cursor.fetchone()[0]
    
    # Store chat_id and money in the state
    await state.update_data(chat_id=callback_query.message.chat.id, money=money, selected_chat_id=data[1])
    
    if money > 0:
        await bot.send_message(callback_query.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 100 –∏–ª–∏ 500, –Ω–æ —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ {money}')
        await MoneyState.waiting_for_money.set()
    else:
        await bot.send_message(callback_query.message.chat.id, f'–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.',reply_markup=keyboard)
        await state.finish()   

@dp.message_handler(state=MoneyState.waiting_for_money)
async def enter_money(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        chat_id = data.get('chat_id')
        selected_chat_id = data.get('selected_chat_id')

    if chat_id is None or selected_chat_id is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT money FROM chats WHERE chat_id=?", (selected_chat_id, ))
    result = cursor.fetchone()

    if result is not None and message.text.isdigit():
        money = int(message.text)
        if money > 0:
            if float(message.text) <= float(result[0]):
                await state.update_data(money=money)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ'")
                await MoneyState.waiting_for_fio.set()
            else:
                await message.answer(f"–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ {result[0]}")
        else:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    else:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")







@dp.message_handler(state=MoneyState.waiting_for_fio)
async def enter_fio(message: types.Message, state: FSMContext):
    if message.text.count(' ') == 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        async with state.proxy() as data:
            data['fio'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (12 —Ü–∏—Ñ—Ä)")
        await MoneyState.waiting_for_card.set()
    else:
        await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∏ —Å–ª–æ–≤–∞ (–ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ) —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏.")

@dp.message_handler(state=MoneyState.waiting_for_card)
async def enter_card(message: types.Message, state: FSMContext):
    card_number = message.text
    if len(card_number.replace(' ', '')) == 16 and card_number.replace(' ', '').isdigit():
        async with state.proxy() as data:
            chat_id = data['chat_id']
            paysum = data['money']
            fio = data['fio']
            selected_chat_id = data['selected_chat_id']

            card = card_number
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO money (telegram_id, chat , paysum, fio, card) VALUES (?, ?, ?, ?, ?)', (chat_id, selected_chat_id ,paysum, fio, card))
        conn.commit()
        conn.close()
        await state.finish()
        await bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ...')
    else:
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'check_vip')
async def check_vip(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    user_id = callback_query.message.chat.id
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã –∏–∑–≤–ª–µ–∫–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT test_period FROM chats WHERE chat_id = ?', (user_id,))
    test_period_end = cursor.fetchone()
    subscription_end_time = ''
    try:

        subscription_end_time = datetime.datetime.strptime(test_period_end[0], '%Y-%m-%d %H:%M:%S')
    except Exception as e:
        print('Error:', e)
    
    if subscription_end_time is None:
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.send_message(callback_query.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É?",reply_markup=keyboard)
        return


    
    current_time = datetime.datetime.now()
    if current_time >= subscription_end_time:
        try:
            # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        except exceptions.MessageToDeleteNotFound:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        sum = get_sum(tg_id=callback_query.message.chat.id)
        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',url=sum))
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.send_message(
            callback_query.message.chat.id,
            text='–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?',
            reply_markup=keyboard,
        )
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    else:
        text = f"<b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b> {subscription_end_time.strftime('%Y-%m-%d %H:%M:%S')}"
        sum = get_sum(tg_id=callback_query.message.chat.id)
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='html'
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'check_ref')
async def check_ref(callback_query: types.CallbackQuery):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±'
    keyboard = types.InlineKeyboardMarkup()
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT who_linked FROM chats WHERE chat_id=?", (str(callback_query.message.chat.id), ))
    result = cursor.fetchone()
    if result[0]:
        keyboard.add(types.InlineKeyboardButton(text='üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', callback_data='get_code'))
        keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    else:
        keyboard.add(types.InlineKeyboardButton(text='üß© –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥', callback_data='type_code'))
        keyboard.add(types.InlineKeyboardButton(text='üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', callback_data='get_code'))
        keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'code_back')
async def check_ref(callback_query: types.CallbackQuery):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±'
    keyboard = types.InlineKeyboardMarkup()
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT who_linked FROM chats WHERE chat_id=?", (str(callback_query.message.chat.id), ))
    result = cursor.fetchone()
    if result[0]:
        keyboard.add(types.InlineKeyboardButton(text='üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', callback_data='get_code'))
        keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    else:
        keyboard.add(types.InlineKeyboardButton(text='üß© –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥', callback_data='type_code'))
        keyboard.add(types.InlineKeyboardButton(text='üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', callback_data='get_code'))
        keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'get_code')
async def type_code(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.message.chat.id,f'–í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ <code>{callback_query.message.chat.id}</code>',parse_mode='html')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'type_code')
async def type_code(callback_query: types.CallbackQuery,state: FSMContext):
    await SetCode.waiting_for_code.set()
    await bot.send_message(callback_query.message.chat.id,'–í–≤–¥–µ–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥')
    async with state.proxy() as data:
        data['chat_id'] = callback_query.message.chat.id

@dp.message_handler(state=SetCode.waiting_for_code)
async def enter_response(message: types.Message, state: FSMContext):
    if message.text == str(message.chat.id):
        await bot.send_message(message.chat.id,'–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥')
    else:
        async with state.proxy() as data:
            chat_id = data['chat_id']
            response_text = message.text

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id –∏ trigger
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM chats WHERE chat_id=?", (str(response_text), ))
            existing_record = cursor.fetchone()
            if existing_record:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                cursor.execute("UPDATE chats SET who_linked=?  WHERE chat_id=?",
                            (response_text, str(chat_id)))
                await message.reply(f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–ø–∏—Å–∞–Ω")

            else:
                await message.reply('–£–ø—Å –≤—ã –º–æ–∂–µ—Ç –æ—à–∏–±–ª–∏—Å—å –Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


            conn.commit()
            conn.close()

    await state.finish()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',callback_data='code_back'))
    await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',reply_markup=keyboard)







@dp.callback_query_handler(lambda callback_query: callback_query.data == 'check_connection')
async def check_connection(callback_query: types.CallbackQuery):
    text = shablon_text
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'check_money')
async def check_money(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    subscription_end_date = get_subscription_end_date_from_database(callback_query.message.chat.id)
    text = ''
    token = yoomoney_token
    client = Client(token)
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç–µ "–ø–æ—Å–ª–µ–¥–Ω–∏–º –º–µ—Å—è—Ü–µ–º"
    last_month_start = datetime.datetime.now() - datetime.timedelta(days=30)
    referral_earnings = 0
 
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = client.operation_history(label=callback_query.message.chat.id)
    

    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
    text += "<b>–°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>\n\n"
    
    recent_operations = []
    
    for operation in history.operations:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π (—Å—Ç–∞—Ç—É—Å "success") –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞
        if operation.status == "success" and operation.datetime >= last_month_start:
            recent_operations.append(operation)
    
    if recent_operations:
        for i, recent_operation in enumerate(recent_operations):

            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∫ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
            text += f"<b>–ü–ª–∞—Ç–µ–∂ #{recent_operation.operation_id}</b>\n"
            text += f"–°—Ç–∞—Ç—É—Å: {recent_operation.status}\n"
            text += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {recent_operation.datetime}\n"
            text += f"–°—É–º–º–∞: {recent_operation.amount}\n\n"

        how_much = len(recent_operations)
        if subscription_end_date is None:
            subscription_end_date = recent_operations[0].datetime

        how_much = len(recent_operations)
        one_month_later = subscription_end_date + datetime.timedelta(days=30 * how_much)
        update_subscription_end_date_in_database(callback_query.message.chat.id, one_month_later)
        status = get_status(callback_query.message.chat.id)
        if status[1] == 0:
            cursor.execute('UPDATE check_status SET status = ? WHERE chat_id = ?', (1, callback_query.message.chat.id))
            conn.commit()        
            data = get_payment()     
            itog_summa = data[-2]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            commission = itog_summa * (data[-1]/100) # 20% –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            cursor.execute('SELECT money FROM chats WHERE chat_id = ?', (callback_query.message.chat.id,))
            current_sum = cursor.fetchone()[0]
            cursor.execute('SELECT all_users FROM info_admins ')
            all_users = cursor.fetchone()[0]
            if all_users == 0:
                all_users+=1
            else:
                all_users+=1
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É
            new_sum = current_sum + commission  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ commission - —ç—Ç–æ –Ω–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('UPDATE chats SET money = ? WHERE chat_id = ?', (new_sum, callback_query.message.chat.id))
            conn.commit()
            cursor.execute('UPDATE user_money_pay SET sum = ? WHERE chat_id = ?', (new_sum, callback_query.message.chat.id))
            conn.commit()
            cursor.execute('UPDATE info_admins SET all_users = ? ', (all_users, ))
            conn.commit()
            referring_user_id = get_referring_user_id_from_database(callback_query.message.chat.id)

            add_money_to_user(referring_user_id, commission)




            #------------------–°–î–ï–õ–ê–¢–¨ –í–õ–û–ñ–ï–ù–ù–´–ô IF —Å UPDATE –¥–∞–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è------------

    # –î–æ–±–∞–≤—å—Ç–µ referral_earnings –∫ —Å—É–º–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        
    else:
        text += "–£ –≤–∞—Å –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–ª–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_chat_menu'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
 
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_chat_menu')
async def back_chat_menu(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',callback_data='check_vip'))
    keyboard.add(types.InlineKeyboardButton(text='üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏', callback_data='check_money'))
    keyboard.add(types.InlineKeyboardButton(text='‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',callback_data='check_connection'))
    keyboard.add(types.InlineKeyboardButton(text='üîå –†–µ—Ñ —Å—Å—ã–ª–∫–∞',callback_data='check_ref'))
    keyboard.add(types.InlineKeyboardButton(text="ü§ñ –ö –±–æ—Ç—É", url='https://t.me/tiqavito_bot'))


    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'video')
async def video_sos(callback_query: types.CallbackQuery):
    with open('full_video.mp4', 'rb') as video_file:
        # Send the video
            
        await bot.send_video(chat_id=callback_query.message.chat.id, video=video_file)


    # Introduce a delay using asyncio.sleep()
    await asyncio.sleep(2)  # Adjust the delay time as needed

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))
    
    
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ callback_query.message.chat.id –∏ callback_query.message.message_id
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text='https://youtu.be/HciXG9bnWRw',
        reply_markup=keyboard,
    )



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'test_period_start')
async def test_start(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT test_period_end FROM clients WHERE id_telegram = ?', (user_id,))
    test_period_end = cursor.fetchone()

    if test_period_end is None:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        test_period_end = datetime.datetime.now() + datetime.timedelta(days=7)
        cursor.execute('INSERT INTO clients (id_telegram, test_period_end) VALUES (?, ?)', (user_id, test_period_end))
    else:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        current_time = datetime.datetime.now()

        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–µ–∫—É–Ω–¥
        current_time_without_microseconds = current_time.replace(microsecond=0)

        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
        test_period_end = current_time_without_microseconds + datetime.timedelta(days=7)
        cursor.execute('UPDATE clients SET test_period_end = ? WHERE id_telegram = ?', (test_period_end, user_id))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='back_main'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_wrapper')
async def back_wr(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text='üìπ –í–∏–¥–µ–æ', callback_data='video'),
        types.InlineKeyboardButton(text='‚ûï Avito', callback_data='req_avito')
    )
    keyboard.add(
        types.InlineKeyboardButton(text='üï• –¢–µ—Å—Ç', callback_data='test_period'),
        types.InlineKeyboardButton(text='üìÉ –û—Ç—á–µ—Ç—ã', callback_data='auto_othcet')
    )
    keyboard.add(
        types.InlineKeyboardButton(text='ü§ñ –ë–æ—Ç', callback_data='bot_connect'),
        types.InlineKeyboardButton(text='üì§ –û—Ç–≤–µ—Ç', callback_data='bot_to_answer')
    )
    keyboard.add(
        types.InlineKeyboardButton(text='üíæ –î–∏–∞–ª–æ–≥', callback_data='bot_to_show'),
        types.InlineKeyboardButton(text='üìë –°—Ü–µ–Ω–∞—Ä–∏–∏', callback_data='req_avito')
    )
    keyboard.add(types.InlineKeyboardButton(text='üìö –í—Å–µ —á–∞—Ç—ã', callback_data='data_call'))
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_main'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=keyboard
    )



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'data_call')
async def test_period(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))

    media_group = []
    
    # Add each image to the media group
    media_group = []

    # Open the file outside the loop
    for filename in os.listdir(image_folder5):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            file = open(os.path.join(image_folder5, filename), 'rb')
            media = types.InputMediaPhoto(file)
            media_group.append(media)

    text = data_text
    
    # Send the media group
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    await bot.send_media_group(callback_query.message.chat.id, media=media_group)
    
    # Send text and keyboard
    await bot.send_message(callback_query.message.chat.id, text=text, reply_markup=keyboard, parse_mode='html')



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'bot_connect')
async def test_period(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    media_group = []

    # Open the file outside the loop
    for filename in os.listdir(image_folder2):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            file = open(os.path.join(image_folder2, filename), 'rb')
            media = types.InputMediaPhoto(file)
            media_group.append(media)

    text = text_con
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    await bot.send_media_group(callback_query.message.chat.id, media=media_group)

    await bot.send_message(callback_query.message.chat.id, text=text,reply_markup=keyboard,parse_mode='html')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'bot_to_answer')
async def test_period(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))
    media_group = []

    # Open the file outside the loop
    for filename in os.listdir(image_folder3):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            file = open(os.path.join(image_folder3, filename), 'rb')
            media = types.InputMediaPhoto(file)
            media_group.append(media)

    text = text_con

    # Send media group, text, and keyboard
    await bot.send_media_group(callback_query.message.chat.id, media=media_group)
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.send_message(callback_query.message.chat.id, text=text, reply_markup=keyboard, parse_mode='html')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'bot_to_show')
async def test_period(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    media_group = []

    # Open the file outside the loop
    for filename in os.listdir(image_folder4):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            file = open(os.path.join(image_folder4, filename), 'rb')
            media = types.InputMediaPhoto(file)
            media_group.append(media)

    text = text_show
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    await bot.send_media_group(callback_query.message.chat.id, media=media_group)

    await bot.send_message(callback_query.message.chat.id, text=text,reply_markup=keyboard,parse_mode='html')




@dp.callback_query_handler(lambda callback_query: callback_query.data == 'req_avito')
async def req_avito(callback_query: types.CallbackQuery):
    text = start_text
    text1 = instruct_first

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await bot.send_message(callback_query.message.chat.id, text=text, parse_mode='html')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    with open('video.gif', 'rb') as video_file:
        await bot.send_video(chat_id=callback_query.message.chat.id, video=video_file)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç
    await bot.send_message(callback_query.message.chat.id, text=text1, parse_mode='html')

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    await bot.send_message(callback_query.message.chat.id, text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:", reply_markup=keyboard)

    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç "text" –∏–ª–∏ –≤–∏–¥–µ–æ) —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ bot.delete_message().



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'auto_othcet')
async def auto_othcet(callback_query: types.CallbackQuery):
    text = work_auto_ans
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',callback_data='back_wrapper'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='html'
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'test_period')
async def test_period(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_wrapper'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    media_group = []

    # Open the file outside the loop
    for filename in os.listdir(image_folder):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            file = open(os.path.join(image_folder, filename), 'rb')
            media = types.InputMediaPhoto(file)
            media_group.append(media)

    text = test_periiod_text
    await bot.send_media_group(callback_query.message.chat.id, media=media_group)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.send_message(callback_query.message.chat.id, text=text,reply_markup=keyboard,parse_mode='html')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'sos')
async def pomosh(callback_query: types.CallbackQuery):
    text = '''–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text='üìÉ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='back_wrapper'),
        types.InlineKeyboardButton(text='üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='sos_with_me')
    )
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'sos_with_me')
async def req_avito(callback_query: types.CallbackQuery):
    text = f"""
ü§ù <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã</b>
AvitoAuto –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º 24/7! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

‚ÄºÔ∏è –û—Ç–≤–µ—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 00:00. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –º—ã —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞–µ–º –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è! –í–∞—à–µ —É–¥–æ–±—Å—Ç–≤–æ - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.

üì§ <a href="{me_link}">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</a> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.

üöÄ –ú—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.

<i>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ AvitoAuto</i>
"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',callback_data='sos'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='html'
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'auto_answera')
async def auto_answera(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text='üîç –ü–æ–∫–∞–∑–∞—Ç—å', callback_data='show_answers_table'),
        types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_answer')
    )
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ',
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_menu_show')
async def back_menu_show(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text='üîç –ü–æ–∫–∞–∑–∞—Ç—å', callback_data='show_answers_table'),
        types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_answer')
    )
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ',
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_answers_table')
async def show_answers_table(callback_query: types.CallbackQuery):

    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    user_id_telegram = callback_query.message.chat.id

    try:

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ user_id, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É user_id
            cursor.execute('SELECT * FROM chats WHERE acc_id = ?', (user_id[0],))
            chats = cursor.fetchall()
            if chats:
                    # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É acc_id
                for chat in chats:
                    chat_id = chat[1]
                    id_avito = chat[2]
                    client_id = chat[3]
                    client_secret = chat[4]
                    token = chat[5]
                    test_period = chat[6]
                    token = get_token(chat_id)
                    profile = await get_profile(token=token)
                    profile_name = profile['name']
                    profile_url = profile['profile_url']
                    chat_info = await bot.get_chat(chat_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <code>{chat_info.title}</code>\n"
                        f"<b>–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{user_id_telegram}</code>\n"
                        f"<b>Client_id:</b> <code>{client_id}</code>\n"
                        f"<b>Client_secret:</b> <code>{client_secret}</code>"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"certainUser^{chat_id}"))
                    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

                    await bot.send_message(callback_query.message.chat.id, text=message_text, parse_mode="html", reply_markup=keyboard)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))

                await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)

        
    except:
        await bot.answer_callback_query(callback_query.id, text='–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –≤ —á–∞—Ç–µ', show_alert=True)



@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('certainUser^')))
async def certainUser(callback_query: types.CallbackQuery):
    action_data = callback_query.data.split('^')
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    chat_id = action_data[1]  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ action_data
    if chat_id:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã 'msgs'
        cursor.execute('SELECT * FROM msgs WHERE chat_id = ?', (chat_id,))
        msgs_data = cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã 'time_msgs'
        cursor.execute('SELECT * FROM time_msgs WHERE chat_id = ?', (chat_id,))
        time_msgs_data = cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã 'auto_responses'
        cursor.execute('SELECT * FROM auto_responses WHERE chat_id = ?', (chat_id,))
        auto_responses_data = cursor.fetchone()

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        token = get_token(chat_id)
        profile = await get_profile(token=token)
        profile_name = profile['name']
        profile_url = profile['profile_url']
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        message_text = f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
        message_text2 = f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
        message_text3 = f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü 'msgs', 'time_msgs', 'auto_responses'
        if msgs_data:
            message_text+= f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n'
            message_text+= f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {msgs_data[1]}\n'
            message_text+= f'–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {msgs_data[4]}\n'
            message_text+= f'–û—Ç–≤–µ—Ç: {msgs_data[-1]}\n'

            keyboard = types.InlineKeyboardMarkup()
            if msgs_data[3] == 1:
                keyboard.add(types.InlineKeyboardButton(text='–í—ã–∫–ª',callback_data=f'autoOff_{chat_id}'))
            else:
                keyboard.add(types.InlineKeyboardButton(text='–í–∫–ª',callback_data=f'autoOn_{chat_id}'))

            keyboard.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',callback_data=f'autoDelete_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥–∞–ª–æ–≤–∫–∞',callback_data=f'autoChzag_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª—å',callback_data=f'autoChangeDate_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç',callback_data=f'autoChangeAns_{chat_id}'))
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

            await bot.send_message(callback_query.message.chat.id,text=message_text,reply_markup=keyboard,parse_mode='html')

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'msgs'

        if time_msgs_data:
            message_text2+= f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b>\n'
            message_text2+= f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {time_msgs_data[1]}\n'
            message_text2+= f'–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {time_msgs_data[4]}\n'
            message_text2+= f'–û—Ç–≤–µ—Ç: {time_msgs_data[-3]}\n'
            message_text2+= f'–ù–∞—á–∞–ª–æ: {time_msgs_data[-2]}\n'
            message_text2+= f'–ö–æ–Ω–µ—Ü: {time_msgs_data[-1]}\n'

            keyboard = types.InlineKeyboardMarkup()
            if time_msgs_data[3] == 1:
                keyboard.add(types.InlineKeyboardButton(text='–í—ã–∫–ª',callback_data=f'Timeoff_{chat_id}'))
            else:
                keyboard.add(types.InlineKeyboardButton(text='–í–∫–ª',callback_data=f'TimeOn_{chat_id}'))

            keyboard.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',callback_data=f'Timedelete_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥–∞–ª–æ–≤–∫–∞',callback_data=f'TimeChangeZag_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª—å',callback_data=f'TimeChangeDate_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç',callback_data=f'TimeChangeAns_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',callback_data=f'TimeChangeTime_{chat_id}'))
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

            await bot.send_message(callback_query.message.chat.id,text=message_text2,reply_markup=keyboard,parse_mode='html')
            

        if auto_responses_data:
            message_text3+= f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>–¢—Ä–∏–≥–≥–µ—Ä—ã</b>\n'
            message_text3+= f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {auto_responses_data[-3]}\n'
            message_text3+= f'–û—Ç–≤–µ—Ç: {auto_responses_data[-1]}\n'


            keyboard = types.InlineKeyboardMarkup()
            if auto_responses_data[3] == 1:
                keyboard.add(types.InlineKeyboardButton(text='–í—ã–∫–ª',callback_data=f'TrOff_{chat_id}'))
            else:
                keyboard.add(types.InlineKeyboardButton(text='–í–∫–ª',callback_data=f'TrOn_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',callback_data=f'TrDelete_{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã',callback_data=f'TrCangeTriggers_{chat_id}'))

            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
            await bot.send_message(callback_query.message.chat.id,text=message_text3,reply_markup=keyboard,parse_mode='html')
        else:
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
            await bot.send_message(callback_query.message.chat.id,'–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',callback_data='back_menu_show'))
    await bot.send_message(callback_query.message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',reply_markup=keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('Troff', 'TrOn','TrDelete','TrCangeTriggers','TrChangeAns')))
async def Trprocessing(callback_query: types.CallbackQuery,state: FSMContext):
    action = callback_query.data.split('_')
    await state.update_data(chat_id = action[1])
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='show_answers_table'))
    if action[0] == 'Troff':
        cursor.execute("UPDATE auto_responses SET enabled=?  WHERE chat_id=?",
                           (0,  str(action[1])))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–¢—Ä–∏–≥–≥–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω—ã',reply_markup=keyboard)
    elif action[0] == 'TrOn':
        cursor.execute("UPDATE auto_responses SET enabled=?  WHERE chat_id=?",
                           (1,  str(action[1])))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–¢—Ä–∏–≥–≥–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã',reply_markup=keyboard)
    elif action[0] == 'TrDelete':
        cursor.execute("DELETE FROM auto_responses WHERE chat_id=?",
                           (str(action[1]),))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–¢—Ä–µ–≥–≥–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',reply_markup=keyboard)
    elif action[0] == 'TrCangeTriggers':
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±—Ä–∞–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–≤–æ–¥ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        text = '''üìù–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –¢—Ä–∏–≥–≥–µ—Ä–æ–º –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.

        –ö–∞–∂–¥—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

        –ü—Ä–∏–º–µ—Ä:
        –ö–∞–∫–∞—è —Ü–µ–Ω–∞
        –¶–µ–Ω–∞ –∫–∞–∫–∞—è
        –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç
        –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É
        –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'''
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='stopp'))
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.send_message(callback_query.message.chat.id, text=text,reply_markup=keyboard)
        await ChangeAutoTriggers.WaitingForTrigger.set()
 




@dp.callback_query_handler(lambda callback_query: callback_query.data =='stopp', state=ChangeAutoTriggers)
async def stopp(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.message.chat.id,'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(state=ChangeAutoTriggers.WaitingForTrigger)
async def enter_trigger(message: types.Message, state: FSMContext):
    # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    async with state.proxy() as data:
        chat_id = data['chat_id']
        trigger = message.text
        await state.update_data(trigger=trigger)

        await message.reply(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä '{trigger}':")
        await AutoTriggers.WaitingForResponse.set()


@dp.message_handler(state=ChangeAutoTriggers.WaitingForResponse)
async def enter_response(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = data['chat_id']
        trigger = data['trigger']
        response_text = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id –∏ trigger
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM auto_responses WHERE chat_id=?", (str(chat_id), ))
        existing_record = cursor.fetchone()
        if existing_record:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            cursor.execute("UPDATE auto_responses SET trigger=?, response_text=?  WHERE chat_id=?",
                           (trigger, response_text, str(chat_id)))
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            cursor.execute("INSERT INTO auto_responses (chat_id, trigger, enabled response_text) VALUES (?, ?, ?)",
                           (str(chat_id), trigger, 1 ,response_text))

        conn.commit()
        conn.close()

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
        await bot.send_message(message.chat.id,f'–¢—Ä–∏–≥–≥–µ—Ä {trigger} –∏ –µ–≥–æ –æ—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',reply_markup=keyboard)
        await state.finish()






@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('autoOff', 'autoOn', 'autoDelete','autoChzag','autoChangeDate','autoChangeAns')))
async def auto_processing(callback_query: types.CallbackQuery,state: FSMContext):
    action = callback_query.data.split('_')
    await state.update_data(chat_id = action[1])
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    if action[0] == 'autoOff':
        cursor.execute("UPDATE msgs SET enabled=?  WHERE chat_id=?",
                           (0,  str(action[1])))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω')

    elif action[0] == 'autoOn':
        cursor.execute("UPDATE msgs SET enabled=?  WHERE chat_id=?",
                           (1,  str(action[1])))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω')
    elif action[0] == 'autoDelete':
        cursor.execute("DELETE FROM msgs WHERE chat_id=?",
                           (str(action[1]),))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    elif action[0] == 'autoChzag':
        await bot.send_message(callback_query.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–∞–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
        await ChangeAutoResponseStateTitle.waiting_for_title.set()
    elif action[0] == 'autoChangeDate':
        await ChangeAutoResponseStateWeekDaysChange.waiting_for_weekdays_change.set()
        markup = change_get_week_days_keyboard([])
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç:", reply_markup=markup)

    elif action[0] == 'autoChangeAns':
        await bot.send_message(callback_query.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
        await ChangeAutoResponseStateAnswer.waiting_for_answer.set()





@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('changeChoose_day_'), state=ChangeAutoResponseStateWeekDaysChange.waiting_for_weekdays_change)
async def choose_day(callback_query: types.CallbackQuery, state: FSMContext):
    selected_day = callback_query.data.split('_')[2]
    async with state.proxy() as data:
        chat_id = data['chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        if selected_day == "done":
            # –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            await state.finish()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
            await bot.send_message(callback_query.message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",reply_markup=keyboard)
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–¥–µ—Å—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            selected_days = data.get('selected_days', [])
            week_days_string = ",".join(selected_days)  # –°—Ç—Ä–æ–∫–∞, –≥–¥–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏
            cursor.execute("UPDATE msgs SET week_days = ? WHERE chat_id = ?", (week_days_string, chat_id))

            conn.commit()
            conn.close()
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            selected_days = data.get('selected_days', [])
            if selected_day == "all":
                selected_days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
            elif selected_day in selected_days:
                selected_days.remove(selected_day)
            else:
                selected_days.append(selected_day)

            data['selected_days'] = selected_days
            updated_markup = change_get_updated_week_days_keyboard(selected_days)
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

            await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def change_get_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "changeChoose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'changeChoose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="changeChoose_day_done"))
    return markup
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def change_get_updated_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "changeChoose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'changeChoose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="changeChoose_day_done"))
    return markup
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
@dp.callback_query_handler(lambda callback_query: callback_query.data == "changeChoose_day_all", state=ChangeAutoResponseStateWeekDaysChange.waiting_for_weekdays_change)
async def changeChoose_day_all(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['selected_days'] = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        updated_markup = change_get_updated_week_days_keyboard(data['selected_days'])
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)




#------Change answer for msgs-----
@dp.message_handler(state=ChangeAutoResponseStateAnswer.waiting_for_answer)
async def enter_answer(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    async with state.proxy() as data:
        chat_id = data['chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        answer = message.text        
        cursor.execute("UPDATE msgs SET response_text=?  WHERE chat_id=?",
                            (answer,  chat_id))
        conn.commit()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='show_answers_table'))
        await bot.send_message(chat_id=message.chat.id,text='–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',reply_markup=keyboard)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

#change title for msgs
@dp.message_handler(state=ChangeAutoResponseStateTitle.waiting_for_title)
async def enter_title(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    async with state.proxy() as data:
        chat_id = data['chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        title = message.text        
        cursor.execute("UPDATE msgs SET title=?  WHERE chat_id=?",
                            (title,  chat_id))
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='show_answers_table'))
        await bot.send_message(chat_id=message.chat.id,text='–ó–∞–≥–∞–ª–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',reply_markup=keyboard)

        conn.commit()
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('Timeoff', 'TimeOn' ,'Timedelete','TimeChangeZag','TimeChangeDate','TimeChangeTime','TimeChangeAns')))
async def auto_processing(callback_query: types.CallbackQuery,state: FSMContext):
    action = callback_query.data.split('_')
    await state.update_data(chat_id = action[1])
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='show_answers_table'))
    if action[0] == 'Timeoff':
        cursor.execute("UPDATE time_msgs SET enabled=?  WHERE chat_id=?",
                           (0,  str(action[1])))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω',reply_markup=keyboard)
    elif action[0] == 'TimeOn':
        cursor.execute("UPDATE time_msgs SET enabled=?  WHERE chat_id=?",
                           (1,  str(action[1])))
        conn.commit()
        await bot.send_message(callback_query.message.chat.id,'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω',reply_markup=keyboard)
    
    elif action[0] == 'Timedelete':
        cursor.execute("DELETE FROM time_msgs WHERE chat_id=?",
                           (str(action[1]),))
        conn.commit()

        await bot.send_message(callback_query.message.chat.id,'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',reply_markup=keyboard)
    elif action[0] == 'TimeChangeZag':
        await bot.send_message(callback_query.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–∞–ª–æ–≤–æ–∫',reply_markup=keyboard)
        await TimeChangeAutoResponseStateTitle.waiting_for_title.set()
    elif action[0] == 'TimeChangeDate':
        await ChangeTimeResponseStateWeekDays.waiting_for_weekdays.set()
        markup = time_change_get_week_days_keyboard([])
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç:", reply_markup=markup)

    elif action[0] == 'TimeChangeAns':
        await bot.send_message(callback_query.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç')
        await TimeChangeAutoResponseStateAnswer.waiting_for_answer.set()
    elif action[0] == 'TimeChangeTime':
        await bot.send_message(callback_query.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ –ø—Ä–∏–º–µ—Ä—É (00:00)')
        await ChangeTimeResponseStateStartTime.waiting_for_start_time.set()




#----------Change Date Time---------


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('TimechangeChoose_day_'), state=ChangeTimeResponseStateWeekDays.waiting_for_weekdays)
async def time_choose_day(callback_query: types.CallbackQuery, state: FSMContext):
    selected_day = callback_query.data.split('_')[2]
    async with state.proxy() as data:
        chat_id = data['chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        if selected_day == "done":
            # –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            await state.finish()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
            await bot.send_message(callback_query.message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",reply_markup=keyboard)
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–¥–µ—Å—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            selected_days = data.get('selected_days', [])
            week_days_string = ",".join(selected_days)  # –°—Ç—Ä–æ–∫–∞, –≥–¥–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏
            cursor.execute("UPDATE time_msgs SET week_days = ? WHERE chat_id = ?", (week_days_string, chat_id))

            conn.commit()
            conn.close()
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            selected_days = data.get('selected_days', [])
            if selected_day == "all":
                selected_days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
            elif selected_day in selected_days:
                selected_days.remove(selected_day)
            else:
                selected_days.append(selected_day)

            data['selected_days'] = selected_days
            updated_markup = time_change_get_updated_week_days_keyboard(selected_days)
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

            await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def time_change_get_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "TimechangeChoose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'TimechangeChoose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="TimechangeChoose_day_done"))
    return markup
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def time_change_get_updated_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "TimechangeChoose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'TimechangeChoose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="TimechangeChoose_day_done"))
    return markup
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
@dp.callback_query_handler(lambda callback_query: callback_query.data == "TimechangeChoose_day_all", state=ChangeTimeResponseStateWeekDays.waiting_for_weekdays)
async def changeChoose_day_all(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['selected_days'] = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        updated_markup = time_change_get_updated_week_days_keyboard(data['selected_days'])
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)







@dp.message_handler(state=TimeChangeAutoResponseStateAnswer.waiting_for_answer)
async def enter_answer(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    async with state.proxy() as data:
        chat_id = data['chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        answer = message.text        
        cursor.execute("UPDATE time_msgs SET response_text=?  WHERE chat_id=?",
                            (answer,  chat_id))
        conn.commit()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='show_answers_table'))
        await bot.send_message(chat_id=message.chat.id,text='–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',reply_markup=keyboard)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

#change title for msgs
@dp.message_handler(state=TimeChangeAutoResponseStateTitle.waiting_for_title)
async def enter_title(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    async with state.proxy() as data:
        chat_id = data['chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        title = message.text        
        cursor.execute("UPDATE time_msgs SET title=?  WHERE chat_id=?",
                            (title,  chat_id))
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='show_answers_table'))
        await bot.send_message(chat_id=message.chat.id,text='–ó–∞–≥–∞–ª–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',reply_markup=keyboard)

        conn.commit()
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è







@dp.message_handler(lambda message: not message.text.startswith('/'), state=ChangeTimeResponseStateStartTime.waiting_for_start_time)
async def time_change_process_start_time_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            time_str = message.text.strip()
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours < 24) or not (0 <= minutes < 60):
                raise ValueError
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM
            time_formatted = f"{hours:02d}:{minutes:02d}"
            data['start_time'] = time_formatted
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            return

    await ChangeTimeResponseStateEndTime.waiting_for_end_time.set()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")

@dp.message_handler(lambda message: not message.text.startswith('/'), state=ChangeTimeResponseStateEndTime.waiting_for_end_time)
async def time_change_process_end_time_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            time_str = message.text.strip()
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours < 24) or not (0 <= minutes < 60):
                raise ValueError
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM
            time_formatted = f"{hours:02d}:{minutes:02d}"
            data['end_time'] = time_formatted
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            return

    await message.answer("–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    await time_change_process_time_interval_data(message, state)

async def time_change_process_time_interval_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        chat_id = data['chat_id']
        start_time = data['start_time']
        end_time = data['end_time']

        cursor.execute("UPDATE time_msgs SET start_time=?, end_time=? WHERE chat_id=?", (start_time, end_time, chat_id))

        conn.commit()
        conn.close()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='show_answers_table'))
        await bot.send_message(message.chat.id,f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω: —Å {start_time} –¥–æ {end_time}",reply_markup=keyboard)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()





#------------–ú–µ–Ω—è–µ–º –¥–∞—Ç—É-------------





@dp.callback_query_handler(lambda callback_query: callback_query.data == 'add_answer')
async def add_answer(callback_query: types.CallbackQuery):
    text = '''–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ‚ÅâÔ∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –±–æ—Ç—É. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –≤—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤ –∫–∞–∂–¥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –±—ã–ª–∞ —Å–≤–æ—è –ª–æ–≥–∏–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –≤ Telegram –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text='1-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='first_message'),
        types.InlineKeyboardButton(text='üîî –¢—Ä–∏–≥–≥–µ—Ä—ã', callback_data='triggers')
    )
    keyboard.add(types.InlineKeyboardButton(text='‚è∞ –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏', callback_data='time_message')
)
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard
    ) 


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'time_message')
async def time_message(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    user_id_telegram = callback_query.message.chat.id

    try:

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ user_id, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É user_id
            cursor.execute('SELECT * FROM chats WHERE acc_id = ?', (user_id[0],))
            chats = cursor.fetchall()
            if chats:
                # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É acc_id
                for chat in chats:
                    chat_id = chat[1]
                    id_avito = chat[2]
                    client_id = chat[3]
                    client_secret = chat[4]
                    token = chat[5]
                    test_period = chat[6]
                    token = get_token(chat_id)
                    profile = await get_profile(token=token)
                    profile_name = profile['name']
                    profile_url = profile['profile_url']
                    chat_info = await bot.get_chat(chat_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <code>{chat_info.title}</code>\n"
                        f"<b>–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{user_id_telegram}</code>\n"
                        f"<b>Client_id:</b> <code>{client_id}</code>\n"
                        f"<b>Client_secret:</b> <code>{client_secret}</code>"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"time_select^{chat_id}"))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

                    await bot.send_message(callback_query.message.chat.id, text=message_text, parse_mode="html", reply_markup=keyboard)

                    # –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —á–∞—Ç–∞—Ö
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))

                await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)

    except:
        await bot.send_message(callback_query.message.chat.id,'haha')

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('cancel')))
async def cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.message.chat.id,'–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('time_select^')))
async def select_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action_data = callback_query.data.split('^')
    chat_id = action_data[1]  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ action_data
    await state.update_data(chat_id=chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å',callback_data='tstop'))
    await TimeResponseStateTitle.waiting_for_title.set()
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    await bot.send_message(callback_query.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:',reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data =='tstop', state=TimeResponseStateTitle)
async def tstop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
    await bot.edit_message_text(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ids –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(state=TimeResponseStateTitle.waiting_for_title)
async def enter_avito_ids(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    await TimeResponseStateText.waiting_for_text.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=TimeResponseStateText.waiting_for_text)
async def enter_response_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['response_text'] = message.text
    await TimeResponseStateWeekDays.waiting_for_weekdays.set()
    markup = work_get_week_days_keyboard([])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç:", reply_markup=markup)

#----------------–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥ –≤—Ä–µ–º—è-----------------

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('work_choose_day_'), state=TimeResponseStateWeekDays.waiting_for_weekdays)
async def work_choose_day(callback_query: types.CallbackQuery, state: FSMContext):
    selected_day = callback_query.data.split('_')[3]
    async with state.proxy() as data:
        chat_id = callback_query.message.chat.id
        chat_id_from_state = data.get('chat_id', chat_id)
        title = data.get('title')
        response_text = data.get('response_text')

        if selected_day == "done":
            # –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            await state.update_data(selected_days=data.get('selected_days', []))
            await TimeResponseStateStartTime.waiting_for_start_time.set()
            await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. (08:00)")
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            selected_days = data.get('selected_days', [])
            if selected_day == "all":
                selected_days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
            elif selected_day in selected_days:
                selected_days.remove(selected_day)
            else:
                selected_days.append(selected_day)

            data['selected_days'] = selected_days
            updated_markup = work_get_updated_week_days_keyboard(selected_days)
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

            await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)
            

@dp.message_handler(lambda message: not message.text.startswith('/'), state=TimeResponseStateStartTime.waiting_for_start_time)
async def process_start_time_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            time_str = message.text.strip()
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours < 24) or not (0 <= minutes < 60):
                raise ValueError
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM
            time_formatted = f"{hours:02d}:{minutes:02d}"
            data['start_time'] = time_formatted
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            return

    await TimeResponseStateEndTime.waiting_for_end_time.set()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")

@dp.message_handler(lambda message: not message.text.startswith('/'), state=TimeResponseStateEndTime.waiting_for_end_time)
async def process_end_time_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            time_str = message.text.strip()
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours < 24) or not (0 <= minutes < 60):
                raise ValueError
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM
            time_formatted = f"{hours:02d}:{minutes:02d}"
            data['end_time'] = time_formatted
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            return

    await message.answer("–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    await process_time_interval_data(message, state)

async def process_time_interval_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        title = data['title']
        chat_id = data['chat_id']
        response_text = data['response_text']
        selected_days = data['selected_days']
        start_time = data['start_time']
        end_time = data['end_time']
        week_days_string = ",".join(selected_days)

        cursor.execute("INSERT OR REPLACE INTO time_msgs (title, chat_id, enabled, week_days,  response_text, start_time, end_time) VALUES (?, ?, ?,  ?, ?, ?, ?)",
                       (title, chat_id, 1, week_days_string, response_text, start_time, end_time))
        conn.commit()
        conn.close()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
        await bot.send_message(message.chat.id,f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏: {week_days_string}, –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏: —Å {start_time} –¥–æ {end_time}",reply_markup=keyboard)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def work_get_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "work_choose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'work_choose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="work_choose_day_done"))
    return markup
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def work_get_updated_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "work_choose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'work_choose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="work_choose_day_done"))
    return markup
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
@dp.callback_query_handler(lambda callback_query: callback_query.data == "work_choose_day_all", state=TimeResponseStateWeekDays.waiting_for_weekdays)
async def work_choose_day_al(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['selected_days'] = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        updated_markup = work_get_updated_week_days_keyboard(data['selected_days'])
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'triggers')
async def triggers(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    user_id_telegram = callback_query.message.chat.id

    try:

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ user_id, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É user_id
            cursor.execute('SELECT * FROM chats WHERE acc_id = ?', (user_id[0],))
            chats = cursor.fetchall()
            if chats:
                # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É acc_id
                for chat in chats:
                    chat_id = chat[1]
                    id_avito = chat[2]
                    client_id = chat[3]
                    client_secret = chat[4]
                    token = chat[5]
                    test_period = chat[6]
                    token = get_token(chat_id)
                    profile = await get_profile(token=token)
                    profile_name = profile['name']
                    profile_url = profile['profile_url']
                    chat_info = await bot.get_chat(chat_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <code>{chat_info.title}</code>\n"
                        f"<b>–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{user_id_telegram}</code>\n"
                        f"<b>Client_id:</b> <code>{client_id}</code>\n"
                        f"<b>Client_secret:</b> <code>{client_secret}</code>"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"trig^{chat_id}"))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

                    await bot.send_message(callback_query.message.chat.id, text=message_text, parse_mode="html", reply_markup=keyboard)

                    # –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —á–∞—Ç–∞—Ö
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))

                await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)

    except:
        await bot.answer_callback_query(callback_query.id, text='–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –≤ —á–∞—Ç–µ', show_alert=True)




@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('trig^')))
async def select_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action_data = callback_query.data.split('^')
    chat_id = action_data[1]  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ action_data

    text = '''
üìù–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –¢—Ä–∏–≥–≥–µ—Ä–æ–º –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.

–ö–∞–∂–¥—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

–ü—Ä–∏–º–µ—Ä:
–ö–∞–∫–∞—è —Ü–µ–Ω–∞
–¶–µ–Ω–∞ –∫–∞–∫–∞—è
–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç
–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É
–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'''
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='stopp'))

    await bot.send_message(callback_query.message.chat.id, text=text,reply_markup=keyboard)
    await state.update_data(chat_id=chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await AutoTriggers.WaitingForTrigger.set()
    async with state.proxy() as data:
        data['chat_id'] = chat_id


@dp.callback_query_handler(lambda callback_query: callback_query.data =='stopp', state=AutoTriggers)
async def stopp(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
    await bot.edit_message_text(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )

@dp.message_handler(state=AutoTriggers.WaitingForTrigger)
async def enter_trigger(message: types.Message, state: FSMContext):
    # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    async with state.proxy() as data:
        chat_id = data['chat_id']
        trigger = message.text
        await state.update_data(trigger=trigger)
        await message.reply(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä '{trigger}':")
        await AutoTriggers.WaitingForResponse.set()


@dp.message_handler(state=AutoTriggers.WaitingForResponse)
async def enter_response(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = data['chat_id']
        trigger = data['trigger']
        response_text = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id –∏ trigger
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM auto_responses WHERE chat_id=?", (str(chat_id), ))
        existing_record = cursor.fetchone()
        if existing_record:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            cursor.execute("UPDATE auto_responses SET trigger=?, response_text=?  WHERE chat_id=?",
                           (trigger, response_text, str(chat_id)))
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            cursor.execute("INSERT INTO auto_responses (chat_id, trigger, enabled, response_text) VALUES (?, ?, ?, ?)",
                           (str(chat_id), trigger, 1 ,response_text))

        conn.commit()
        conn.close()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
        await bot.send_message(message.chat.id,f'–¢—Ä–∏–≥–≥–µ—Ä {trigger} –∏ –µ–≥–æ –æ—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',reply_markup=keyboard)
        await state.finish()




#–ù–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è 

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'first_message')
async def first_message(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    user_id_telegram = callback_query.message.chat.id

    try:

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ user_id, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É user_id
            cursor.execute('SELECT * FROM chats WHERE acc_id = ?', (user_id[0],))
            chats = cursor.fetchall()
            if chats:
                # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É acc_id
                for chat in chats:
                    chat_id = chat[1]
                    id_avito = chat[2]
                    client_id = chat[3]
                    client_secret = chat[4]
                    token = chat[5]
                    test_period = chat[6]
                    token = get_token(chat_id)
                    profile = await get_profile(token=token)
                    profile_name = profile['name']
                    profile_url = profile['profile_url']
                    chat_info = await bot.get_chat(chat_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <code>{chat_info.title}</code>\n"
                        f"<b>–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{user_id_telegram}</code>\n"
                        f"<b>Client_id:</b> <code>{client_id}</code>\n"
                        f"<b>Client_secret:</b> <code>{client_secret}</code>"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"select^{chat_id}"))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                    await bot.send_message(callback_query.message.chat.id, text=message_text, parse_mode="html", reply_markup=keyboard)

                    # –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —á–∞—Ç–∞—Ö
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))

                await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)

    except:
        await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_main')
async def back_main(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    if callback_query.message.chat.id in admin_ids:
        keyboard.add(
            types.InlineKeyboardButton(text='üé• –í–∏–¥–µ–æ', callback_data='video'),
            types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='spisok')
        )
        keyboard.add(
            types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', callback_data='auto_answera'),
            types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='sos')
    )
        keyboard.add(types.InlineKeyboardButton(text='üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',callback_data='acc_back'))
    else:
        keyboard.add(
            types.InlineKeyboardButton(text='üé• –í–∏–¥–µ–æ', callback_data='video'),
            types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='spisok')
        )
        keyboard.add(
            types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', callback_data='auto_answera'),
            types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='sos')
    )
    keyboard.add(types.InlineKeyboardButton(text='üí∞ –í—ã–ø–ª–∞—Ç—ã', callback_data='send_money'))
    keyboard.add(types.InlineKeyboardButton(text='üí≥ –ë–∞–ª–∞–Ω—Å',callback_data='my_balance'))

    try:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT test_period_end FROM clients WHERE id_telegram = ?', (callback_query.message.chat.id,))
        test_period_end = cursor.fetchone()
        conn.close()
        
        if test_period_end[0] is None:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(types.InlineKeyboardButton(text='üïí –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='test_period_start'))
    except:
        pass
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=keyboard
    ) 

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'my_balance')
async def my_balance(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    user_id_telegram = callback_query.message.chat.id

    try:

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ user_id, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É user_id
            cursor.execute('SELECT * FROM chats WHERE acc_id = ?', (user_id[0],))
            chats = cursor.fetchall()
            if chats:
                # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É acc_id
                for chat in chats:
                    chat_id = chat[1]
                    id_avito = chat[2]
                    client_id = chat[3]
                    client_secret = chat[4]
                    token = chat[5]
                    test_period = chat[6]
                    token = get_token(chat_id)
                    profile = await get_profile(token=token)
                    profile_name = profile['name']
                    profile_url = profile['profile_url']
                    chat_info = await bot.get_chat(chat_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <code>{chat_info.title}</code>\n"
                        f"<b>–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{user_id_telegram}</code>\n"
                        f"<b>Client_id:</b> <code>{client_id}</code>\n"
                        f"<b>Client_secret:</b> <code>{client_secret}</code>"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"my_money^{chat_id}"))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                    await bot.send_message(callback_query.message.chat.id, text=message_text, parse_mode="html", reply_markup=keyboard)

                    # –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —á–∞—Ç–∞—Ö
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_menu_show'))

                await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)

    except:
        await bot.answer_callback_query(callback_query.id, text='–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ.', show_alert=True)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('my_money'))
async def my_money(callback_query: types.CallbackQuery):
    action = callback_query.data.split('^')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='back_main'))
    try:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()      
        cursor.execute('SELECT money FROM chats WHERE chat_id = ?', (action[1],))
        money = cursor.fetchone()[0]
        await bot.send_message(callback_query.message.chat.id,f'–í–∞—à –±–∞–ª–∞–Ω—Å = {money} ‚ÇΩ',reply_markup=keyboard)
    except:
        pass 

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'spisok')
async def spisok(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    user_id_telegram = callback_query.message.chat.id
    message_text = ''
    try:

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute('SELECT id FROM clients WHERE id_telegram = ?', (user_id_telegram,))
        user_id = cursor.fetchone()
        if user_id:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ user_id, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É user_id
            cursor.execute('SELECT * FROM chats WHERE acc_id = ?', (user_id[0],))
            chats = cursor.fetchall()
            if chats:

                    # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É acc_id
                for chat in chats:
                    chat_id = chat[1]
                    id_avito = chat[2]
                    client_id = chat[3]
                    client_secret = chat[4]
                    token = chat[5]
                    test_period = chat[6]
                    token = get_token(chat_id)
                    profile = await get_profile(token=token)
                    profile_name = profile['name']
                    profile_url = profile['profile_url']
                    chat_info = await bot.get_chat(chat_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text += (
                        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> <a href='{profile_url}'>{profile_name}</a>\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <code>{chat_info.title}</code>\n"
                        f"<b>–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{user_id_telegram}</code>\n"
                        f"<b>Client_id:</b> <code>{client_id}</code>\n"
                        f"<b>Client_secret:</b> <code>{client_secret}</code>\n\n"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='back_main'))
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=f'{message_text}',
                    reply_markup=keyboard,
                    parse_mode='html'
                ) 


                # –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —á–∞—Ç–∞—Ö
    except:
        await bot.answer_callback_query(callback_query.id, text='–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –≤ —á–∞—Ç–µ', show_alert=True)







#–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('choose_day_'), state=AutoResponseStateWeekDays.waiting_for_weekdays)
async def choose_day(callback_query: types.CallbackQuery, state: FSMContext):
    selected_day = callback_query.data.split('_')[2]
    async with state.proxy() as data:
        chat_id = callback_query.message.chat.id
        chat_id_from_state = data.get('chat_id', chat_id)
        title = data.get('title')
        response_text = data.get('response_text')

        if selected_day == "done":
            # –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            await state.finish()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
            await bot.send_message(callback_query.message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",reply_markup=keyboard)
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–¥–µ—Å—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            selected_days = data.get('selected_days', [])
            week_days_string = ",".join(selected_days)  # –°—Ç—Ä–æ–∫–∞, –≥–¥–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏
            cursor.execute("INSERT OR REPLACE INTO msgs (title, chat_id, enabled, week_days,  response_text) VALUES (?, ?, ?, ?, ?)",
                           (title, chat_id_from_state, 1, week_days_string,  response_text))
            conn.commit()
            conn.close()
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            selected_days = data.get('selected_days', [])
            if selected_day == "all":
                selected_days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
            elif selected_day in selected_days:
                selected_days.remove(selected_day)
            else:
                selected_days.append(selected_day)

            data['selected_days'] = selected_days
            updated_markup = get_updated_week_days_keyboard(selected_days)
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

            await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def get_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "choose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'choose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="choose_day_done"))
    return markup
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def get_updated_week_days_keyboard(selected_days):
    markup = types.InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width –Ω–∞ 4, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    select_all_callback_data = "choose_day_all"
    select_all_text = "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ" if all(day in selected_days for day in days) else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚ùå"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data=select_all_callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    for i in range(0, len(days), 4):
        row = days[i:i + 4]
        row_buttons = [
            types.InlineKeyboardButton(
                text=f'‚úÖ {day}' if day in selected_days else f'‚ùå {day}',
                callback_data=f'choose_day_{day}'
            ) for day in row
        ]
        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    markup.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="choose_day_done"))
    return markup
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
@dp.callback_query_handler(lambda callback_query: callback_query.data == "choose_day_all", state=AutoResponseStateWeekDays.waiting_for_weekdays)
async def choose_day_all(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['selected_days'] = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        updated_markup = get_updated_week_days_keyboard(data['selected_days'])
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('select^')))
async def select_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action_data = callback_query.data.split('^')
    chat_id = action_data[1]  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ action_data
    await state.update_data(chat_id=chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await AutoResponseStateTitle.waiting_for_title.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='selstop'))
    await bot.send_message(callback_query.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:',reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data =='selstop', state=AutoResponseStateTitle)
async def selstop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='add_answer'))
    await bot.edit_message_text(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ids –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(state=AutoResponseStateTitle.waiting_for_title)
async def enter_avito_ids(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text

    await AutoResponseStateText.waiting_for_text.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=AutoResponseStateText.waiting_for_text)
async def enter_response_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['response_text'] = message.text
    await AutoResponseStateWeekDays.waiting_for_weekdays.set()
    markup = get_week_days_keyboard([])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç:", reply_markup=markup)




@dp.message_handler(Command("data") & ChatTypeFilter(types.ChatType.GROUP))
async def get_data(message: types.Message, just = None):

    current_page = 0
    current_page_message_id = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    message_id = message.message_id
    chat_id = message.chat.id  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ chat_id

    cursor.execute("SELECT test_period FROM chats WHERE chat_id = ?", (chat_id,))
    test_period_str = cursor.fetchone()

    # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    cursor.execute("SELECT current_page, current_page_message_id FROM chats WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchone()
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    if result[0] and result[1]:
        current_page, current_page_message_id = result[0],result[1]
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_page = 0
        current_page_message_id = None

    # Define the number of contacts to display per page
    contacts_per_page = 6
    keyboard = types.InlineKeyboardMarkup(row_width=3)

    # Clear the unique_user_names set for the current page
    unique_user_names.clear()
    user_id = get_user_id(message.chat.id)
    token = get_token(message.chat.id)

    avito_data = await get_avito_data(token=token,user_id=user_id)

    if test_period_str:
        test_period_str = test_period_str[0]
        test_period_str = test_period_str.split('.')[0]  # Remove the fractional seconds
        test_period = datetime.datetime.strptime(test_period_str, '%Y-%m-%d %H:%M:%S')

        if test_period > datetime.datetime.now():
            # Define the number of contacts to display per page

            if avito_data:
                user_data_list = []

                for chat in avito_data["chats"]:
                    for user in chat["users"]:
                        user_name = user["name"]
                        user_id = user['id']  # –ü–æ–ª—É—á–∞–µ–º user_id, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                        chat_id = chat["id"]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
                        if user_name not in unique_user_names:
                            unique_user_names.add(user_name)
                            user_data_list.append({"user_id": user_id, "username": user_name, "chat_id": chat_id})

                # Define the number of contacts to display per page
                contacts_per_page = 6

                # Calculate the total number of pages
                total_pages = (len(user_data_list) + contacts_per_page - 1) // contacts_per_page

                # Check if the current page is out of bounds
                if current_page >= total_pages:
                    
                    current_page = 0

                # Calculate the start and end indices for slicing
                start_index = current_page * contacts_per_page
                end_index = (current_page + 1) * contacts_per_page

                # Get the contacts for the current page
                contacts_on_page = user_data_list[start_index:end_index]

                # Create a list of buttons for the contacts on the current page
                buttons = []
                for user_data in contacts_on_page:
                    user_name = user_data["username"]
                    cleaned_user_name = clean_callback_data(user_name)
                    name = cleaned_user_name + ' üë§'

                    user_id = user_data["user_id"]
                    chat_id = user_data["chat_id"]
                    button = types.InlineKeyboardButton(text=name, callback_data=f'send^{cleaned_user_name}^{user_id}^{chat_id}')
                    buttons.append(button)

                # Create the "Next" and "Back" buttons for page navigation
                navigation_buttons = []
                if total_pages > 1:
                    if current_page > 0:
                        navigation_buttons.append(types.InlineKeyboardButton(text="Back ‚¨ÖÔ∏è", callback_data=f'page_{current_page - 1}'))
                    if current_page < total_pages - 1:
                        navigation_buttons.append(types.InlineKeyboardButton(text="Next ‚û°Ô∏è", callback_data=f'page_{current_page + 1}'))

                # Add the navigation buttons to the keyboard
                if navigation_buttons:
                    keyboard.add(*navigation_buttons)
                if buttons:
                    keyboard.add(*buttons)

                # Check if there's an existing message to edit
                if message.text == '/data':
                    message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                    current_page_message_id = message.message_id
                    cursor.execute("UPDATE chats SET current_page_message_id = ? WHERE chat_id = ?", (current_page_message_id, message.chat.id))
                    conn.commit()
                elif current_page_message_id and just==None:

                    try:
                        await bot.edit_message_text(chat_id=message.chat.id, message_id=current_page_message_id,
                                                    text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                    except aiogram.utils.exceptions.MessageNotModified:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É
                            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        await bot.delete_message(chat_id=message.chat.id, message_id=current_page_message_id)
                        message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                        current_page_message_id = message.message_id
                        cursor.execute("UPDATE chats SET current_page_message_id = ? WHERE chat_id = ?", (current_page_message_id, chat_id))
                        conn.commit()
                elif current_page_message_id and just=='response':
                        try:
                            await bot.send_message(chat_id=message.chat.id, message_id=current_page_message_id,
                                                        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                            
                        except aiogram.utils.exceptions.MessageNotModified:
                            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É
                                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                            await bot.delete_message(chat_id=message.chat.id, message_id=current_page_message_id)
                            message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                            current_page_message_id = message.message_id
                            cursor.execute("UPDATE chats SET current_page_message_id = ? WHERE chat_id = ?", (current_page_message_id, chat_id))
                            conn.commit()
            
                else:
                    # Send the initial message with the contacts and navigation buttons
                    message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
                    current_page_message_id = message.message_id
                    cursor.execute("UPDATE chats SET current_page_message_id = ? WHERE chat_id = ?", (current_page_message_id, message.chat.id))
                    conn.commit()

        else:
            await message.answer("–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")

    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Avito.")

    conn.close()

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('page_'))
async def page_navigation_callback(callback_query: types.CallbackQuery):
    page_number = int(callback_query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∏—Ç–µ chat_id –∏–∑ callback_query
    chat_id = callback_query.message.chat.id
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã chats –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    cursor.execute("SELECT current_page, current_page_message_id FROM chats WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchone()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    if result:
        current_page, current_page_message_id = result
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_page = 0
        current_page_message_id = None

    # –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ chats –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    cursor.execute("UPDATE chats SET current_page = ?, current_page_message_id = ? WHERE chat_id = ?", (page_number, current_page_message_id, chat_id))
    conn.commit()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_data —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º chat_id, current_page –∏ current_page_message_id
    await get_data(callback_query.message)




@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send^'))
async def process_callback(callback_query: types.CallbackQuery):
    user_data = callback_query.data.replace('send^', '').split('^')
    chat_id = ''
    user_id = ''
    if len(user_data)>2:
        chat_id, user_id = user_data[1], user_data[2]
    else:
        chat_id, user_id = user_data[0], user_data[1]
    # –°–æ–∑–¥–∞–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É inline
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="üí¨–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f'view-chat^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'back'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é


    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )

    
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('seend^'))
async def process_callback2(callback_query: types.CallbackQuery):
    user_data = callback_query.data.replace('send^', '').split('^')
    chat_id = ''
    user_id = ''
    if len(user_data)>2:
        chat_id, user_id = user_data[1], user_data[2]
    else:
        chat_id, user_id = user_data[0], user_data[1]
    # –°–æ–∑–¥–∞–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É inline
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="üí¨–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f'view-chat^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message^{chat_id}^{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'back'))


    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )


    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('back','view-chat^', 'send-message^', 'last-message^')))
async def action_callback(callback_query: types.CallbackQuery,state: FSMContext):
    action_data = callback_query.data
    chat_text = ''
    action_data = callback_query.data.split('^')
    action = action_data[0]
    if len(action_data)>2:
        user_id, chat_id  = action_data[1], action_data[2]
    else:
        pass

    if action == 'back':
        current_page = 0
        current_page_message_id = None
        callback_query.data = f'page_{current_page}'
        page_number = int(callback_query.data.split('_')[1])        
        # –ü–æ–ª—É—á–∏—Ç–µ chat_id –∏–∑ callback_query
        chat_id = callback_query.message.chat.id

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()

        # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã chats –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        cursor.execute("SELECT current_page, current_page_message_id FROM chats WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        if result[0] and result[1]:
            current_page, current_page_message_id = result[0],result[1]
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_page = 0
            current_page_message_id = None

        # –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ chats –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        cursor.execute("UPDATE chats SET current_page = ?, current_page_message_id = ? WHERE chat_id = ?", (page_number, current_page_message_id, chat_id))
        conn.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.close()
        callback_query.data = f'page_{current_page}'

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_data —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º chat_id, current_page –∏ current_page_message_id
        await get_data(callback_query.message,just='responce')


    elif action == 'view-chat':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç"
        resp = get_user_id(callback_query.message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(callback_query.message.chat.id)
        data = await get_avito_messages(user_id=resp, chat_id=chat_id, token=token)
        messages = data['messages'][:10]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        resp = get_user_id(callback_query.message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id


        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for message in reversed(messages):
            message_type = message['type']
            sender = "<b>üë§ –í—ã</b>" if message['direction'] == 'out' else "<b>üì¨ –í–∞–º</b>"

            if message_type == 'text':
                text = message['content']['text']
                created_timestamp = message['created']
                created_date = datetime.datetime.fromtimestamp(created_timestamp).strftime('%d.%m.%Y %H:%M')
                chat_text += f"{sender} ({created_date}): {text}\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'link':
                link_text = message['content']['link']['text']
                link_url = message['content']['link']['url']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É: {link_text} ({link_url})\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'location':
                location_data = message['content']['location']
                location_text = location_data['text']
                location_title = location_data['title']
                location_lat = location_data['lat']
                location_lon = location_data['lon']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é:\n{location_text}\n({location_title}, –®–∏—Ä–æ—Ç–∞: {location_lat}, –î–æ–ª–≥–æ—Ç–∞: {location_lon})\n"
            elif message_type == 'photo':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é(–∏)\n"
            elif message_type == 'video':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∏–¥–µ–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ\n"
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫–∏–µ –∫–∞–∫ quick_reply –∏ –¥—Ä—É–≥–∏–µ, –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

        token = get_token(callback_query.message.chat.id)

        await mark_chat_as_read(resp, chat_id, token=token)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message^{user_id}^{chat_id}'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'send^{user_id}^{chat_id}'))
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=chat_text,
        parse_mode='html',
        reply_markup=keyboard
    )



    elif action == 'send-message':
        user_id, chat_id = action_data[1], action_data[2]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        now_button = types.InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data=f'send-now^{chat_id}^{user_id}')
        working_hours_button = types.InlineKeyboardButton("–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", callback_data=f'send-working-hours^{chat_id}^{user_id}')
        custom_time_button = types.InlineKeyboardButton("–í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", callback_data=f'send-custom-time^{chat_id}^{user_id}')
        
        keyboard.add(now_button, working_hours_button, custom_time_button)
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
  
        await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ user_id –∏–∑ callback_data




@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send-working-hours^'))
async def send_working_hours(callback_query: types.CallbackQuery, state: FSMContext):


 
    action_data = callback_query.data
    action_data = callback_query.data.split('^')
    user_id, chat_id = action_data[0], action_data[1] 
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'wstop')
    await WorkTimeMessage.waiting_for_text.set()
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(cancel_button)
    await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:")

    await bot.send_message(callback_query.message.chat.id,'–ú–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å',reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    async with state.proxy() as data:
        data['chat_id'] = chat_id
        data['user_id'] = user_id
        data['telegram_chat_id'] = callback_query.message.chat.id  # –î–æ–±–∞–≤–ª—è–µ–º chat_id Telegram —á–∞—Ç–∞

@dp.callback_query_handler(lambda callback_query: callback_query.data =='wstop', state=WorkTimeMessage)
async def wstop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_text(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send-custom-time^'))
async def send_custom_time(callback_query: types.CallbackQuery, state: FSMContext):
    action_data = callback_query.data
    action_data = callback_query.data.split('^')
    user_id, chat_id = action_data[0], action_data[1] 
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'cstop')
    async with state.proxy() as data:
        data['chat_id'] = chat_id
        data['user_id'] = user_id
        data['telegram_chat_id'] = callback_query.message.chat.id 

    await SpecificTimeMessage.waiting_for_text.set()
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(cancel_button)
    await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:")

    await bot.send_message(callback_query.message.chat.id, "–ú–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å",reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@dp.callback_query_handler(lambda callback_query: callback_query.data =='cstop', state=SpecificTimeMessage)
async def cstop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.message.chat.id,'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    # action_data = callback_query.data
    # action_data = callback_query.data.split('^')
    # user_id, chat_id = action_data[0], action_data[1]
    # print(f'–í–æ—Ç —á–∞—Ç –∞–π–¥–∏ {chat_id}\n–í–æ—Ç —Ç–≥ –∞–π–¥–∏ {user_id}')
    #     # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    # async with state.proxy() as data:
    #     data['chat_id'] = chat_id
    #     data['user_id'] = user_id
    #     data['telegram_chat_id'] = callback_query.message.chat.id 

    # # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # await SpecificTimeMessage.waiting_for_text.set()


@dp.message_handler(state=WorkTimeMessage.waiting_for_text)
async def process_time(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response_text = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            chat_id = data['chat_id']
            
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()

            cursor.execute('SELECT start_time, end_time, week_days  FROM time_msgs WHERE chat_id = ?', (message.chat.id,))
            lst = cursor.fetchone()
            cursor.execute('INSERT INTO check_work_msgs (chat_id, start_time, end_time,week_days , avito_chat, response_text) VALUES (?, ?, ?, ?, ?, ?)',
                            (message.chat.id, lst[0], lst[1], lst[2] ,chat_id, response_text))
            conn.commit()
            conn.close()
            await bot.send_message(message.chat.id,'–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—Ö –¥–ª—è –æ–ø—Ç—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è')
            await state.finish()
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    except Exception as e:
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await state.finish()


@dp.message_handler(state=SpecificTimeMessage.waiting_for_text)
async def process_time(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response_text = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['response_text'] = response_text

        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n<b>–£—á–∏—Ç—ã–≤–∞–µ—Ç–µ —á—Ç–æ –≤—Ä–µ–º—è –ú–°–ö+3 —É –º–µ–Ω—è</b>",parse_mode='html')

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        await SpecificTimeMessage.next()
    except Exception as e:
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
@dp.message_handler(lambda message: message.text and ":" in message.text, state=SpecificTimeMessage.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
   
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_time = message.text
    telegram_chat_id = ''
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    hours, minutes = map(int, user_time.split(':'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—ã –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59)
    if 0 <= hours <= 23 and 0 <= minutes <= 59:
        async with state.proxy() as data:
            chat_id = data['chat_id']
            user_id = data['user_id']
            telegram_chat_id = data['telegram_chat_id']
            response_text = data['response_text']

            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            cursor.execute('INSERT INTO specific_msgs_time (chat_id, time, avito_chat, response_text) VALUES (?, ?, ?, ?)',
                            (message.chat.id, user_time, chat_id, response_text))
            conn.commit()
            conn.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑", callback_data=f'send-message^{user_id}^{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'seend^{user_id}^{chat_id}'))
            await bot.send_message(
                chat_id=telegram_chat_id,
                text='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
                parse_mode='html',
                reply_markup=keyboard
            )
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.finish()
    else:
        await bot.send_message(telegram_chat_id, "–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send-working-hours^'))
async def send_working_hours(callback_query: types.CallbackQuery,state: FSMContext):
    action_data = callback_query.data
    action_data = callback_query.data.split('^')
    user_id, chat_id = action_data[0], action_data[1]
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'cancel')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(cancel_button)
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:",reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await SpecificTimeMessage.waiting_for_text.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    async with state.proxy() as data:
        data['chat_id'] = chat_id
        data['user_id'] = user_id
        data['telegram_chat_id'] = callback_query.message.chat.id  # –î–æ–±–∞–≤–ª—è–µ–º chat_id Telegram —á–∞—Ç–∞





@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send-now^'))
async def send_now(callback_query: types.CallbackQuery,state: FSMContext):
    
    action_data = callback_query.data
    chat_text = ''
    action_data = callback_query.data.split('^')
    user_id, chat_id = action_data[0], action_data[1]
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'nstop')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(cancel_button)
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–π—á–∞—Å:",reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await MyStates.waiting_for_text.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    async with state.proxy() as data:
        data['chat_id'] = chat_id
        data['user_id'] = user_id
        data['telegram_chat_id'] = callback_query.message.chat.id  # –î–æ–±–∞–≤–ª—è–µ–º chat_id Telegram —á–∞—Ç–∞

@dp.callback_query_handler(lambda callback_query: callback_query.data =='nstop', state=MyStates)
async def nstop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.message.chat.id,'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

@dp.message_handler(state=TimeMessage.waiting_for_text)
async def process_text2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = data['chat_id']
        user_id = data['user_id']
        telegram_chat_id = data['telegram_chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id Telegram —á–∞—Ç–∞
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        resp = get_user_id(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(message.chat.id)
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute('SELECT start_time, end_time , week_days FROM time_msgs WHERE chat_id = ?', (message.chat.id,))
        lst = cursor.fetchone()
        cursor.execute('INSERT INTO check_work_msgs (chat_id, start_time, end_time, avito_chat ,response_text) VALUES (?, ?, ?, ?, ?, ?)',
                            (message.chat.id, lst[0], lst[1], lst[2] ,chat_id ,message.text))
        conn.commit()
        conn.close()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑", callback_data=f'send-message^{user_id}^{chat_id}'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'seend^{user_id}^{chat_id}'))

        await bot.send_message(
            chat_id=telegram_chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat_id —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            text='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
            parse_mode='html',
            reply_markup=keyboard
        )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.message_handler(state=MyStates.waiting_for_text)
async def process_text3(message: Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = data['chat_id']
        telegram_chat_id = data['telegram_chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id Telegram —á–∞—Ç–∞
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        resp = get_user_id(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(message.chat.id)
        user_id = get_user_id(message.chat.id)
        try:
            await send_message(chat_id=chat_id, user_id=resp, text=message.text, token=token)
            await mark_chat_as_read(resp, chat_id, token=token)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑", callback_data=f'send-message^{user_id}^{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'seend^{user_id}^{chat_id}'))
            await bot.send_message(
                chat_id=telegram_chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat_id —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!',
                parse_mode='html',
                reply_markup=keyboard
            )
        except:
            await bot.send_message(
                chat_id=telegram_chat_id,
                text='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                parse_mode='html'
            )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.message_handler(content_types=types.ContentTypes.TEXT, chat_type=types.ChatType.GROUP)
async def check_pattern(message: types.Message):
    if message.text.lower().startswith("—à–∞–±–ª–æ–Ω"):
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–®–∞–±–ª–æ–Ω", –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        lst = message.text.split('\n')
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        if len(lst)==4:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º chat_id
                cursor.execute('SELECT id FROM chats WHERE chat_id = ?', (message.chat.id,))
                existing_chat = cursor.fetchone()
                if existing_chat != None:
                    cursor.execute('SELECT id, test_period FROM chats WHERE chat_id = ?', (message.chat.id,))
                    time = cursor.fetchone()
                    test_period_str = time[1]
                    test_period_str = test_period_str.split('.')[0]  # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å —Å–µ–∫—É–Ω–¥—ã
                    test_period = datetime.datetime.strptime(test_period_str, '%Y-%m-%d %H:%M:%S')
                    if test_period <= datetime.datetime.now():
                        keyboard = types.InlineKeyboardMarkup()
                        sum = get_sum(tg_id=message.chat.id)
                        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',url=sum))
                        await message.reply(f"–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",reply_markup=keyboard)
                    else:
                        token = set_personal_token(client_id=lst[2],client_secret=lst[3])
                        if token:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ chats
                            cursor.execute('UPDATE chats SET id_avito = ?, client_id = ?, client_secret = ?, token = ?  WHERE chat_id = ?',
                                        (lst[1], lst[2], lst[3], token, message.chat.id))
                            conn.commit()
                            await bot.send_message(message.chat.id,'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                        else:
                            await bot.send_message(message.chat.id,'–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')

                else:
                    if test_period <= datetime.datetime.now():
                        keyboard = types.InlineKeyboardMarkup()
                        sum = get_sum(tg_id=message.chat.id)
                        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',url=sum))
                        await message.reply(f"–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",reply_markup=keyboard)
                    else:
                        token = set_personal_token(client_id=lst[2],client_secret=lst[3])
                        if token:
                            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                            cursor.execute('INSERT INTO chats (chat_id, id_avito, client_id, client_secret,token) VALUES (?, ?, ?, ?, ?)',
                                        (message.chat.id, lst[1], lst[2], lst[3], token))
                            
                            conn.commit()
                            await bot.send_message(message.chat.id,'Avito —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ç–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.')
                        else:
                            await bot.send_message(message.chat.id,'–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')

                    
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö


            except:
                pass
        else:
            await bot.send_message(message.chat.id,'–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–∂–∞–æ–ª—É–π—Å—Ç–∞')
                
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        conn.close()

    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–®–∞–±–ª–æ–Ω", –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '–®–∞–±–ª–æ–Ω'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /account_info
@dp.message_handler(commands=['account_info'])
async def get_account_info(message: types.Message):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f'view_balance'),types.InlineKeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É ", callback_data=f'chang_balance'))
        keyboard.add(types.InlineKeyboardButton(text='‚Åí –ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫—É',callback_data='change_procent'))
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å–∫—É',callback_data='show_statistic'))
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ',callback_data='change_tarif'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'main_back'))
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=keyboard)
    except Exception as e:
        print('Error:', str(e))




@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('view_balance',  'show_statistic' , 'change_tarif' ,'chang_balance','view_site','change_procent')))
async def action_callback(callback_query: types.CallbackQuery,state: FSMContext):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='acc_back'))  # Update this line
    if callback_query.data == 'view_balance':
        try:

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ÆMoney
            user = client.account_info()
            account_info = (
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <strong >{user.account}</strong>\n"
                f"–ë–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ\n"

            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Telegram
            await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=account_info, parse_mode='html',reply_markup=keyboard)
            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        except Exception as e:
            await callback_query.message.reply(f"An error occurred: {str(e)}")
    elif callback_query.data == 'change_tarif':
        global users_per_page_2
        global current_page_2
        global total_pages_2
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        chat_id = callback_query.message.chat.id
        cursor.execute("SELECT chat_id, acc_id, test_period FROM chats")
        subscriptions = cursor.fetchall()
        current_time_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        current_time = datetime.datetime.strptime(current_time_str, "%Y-%m-%d %H:%M:%S")

        # Number of users to display per page

        # Calculate the total number of pages
        total_pages_2 = int(ceil(len(subscriptions) / users_per_page_2))

        # Current page (you can set this based on user input)

        # Calculate the index range for the current page
        start_index = (current_page_2 - 1) * users_per_page_2
        end_index = min(current_page_2 * users_per_page_2, len(subscriptions))

        # Create the inline keyboard
        keyboard = types.InlineKeyboardMarkup()

        # Add users for the current page
        for i in range(start_index, end_index):
            subscription = subscriptions[i]
            time = datetime.datetime.strptime(subscription[2], '%Y-%m-%d %H:%M:%S')
            acc_id = subscription[1]
            cursor.execute("SELECT id_telegram FROM clients WHERE id = ?", (acc_id,))
            id_telegram = cursor.fetchone()
            user = await bot.get_chat(id_telegram[0])
            chat = await bot.get_chat(subscription[0])
            if time >= current_time:
                button_text = f'{user.username} | {chat.title} ‚úÖ'
            else:
                button_text = f'{user.username} | {chat.title}‚ùå'

            button = types.InlineKeyboardButton(text=button_text, callback_data=f"select_user_{subscription[0]}")
            keyboard.add(button)

        # Add "Next" and "Back" buttons for pagination
        if current_page_2 > 1:
            keyboard.add(types.InlineKeyboardButton(text='Back', callback_data=f'prev_page_{current_page_2 - 1}'))
        if current_page_2 < total_pages_2:
            keyboard.add(types.InlineKeyboardButton(text='Next', callback_data=f'next_page_{current_page_2 + 1}'))

        # Add a "Return" button
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='acc_back'))

        # Send the message with the inline keyboard
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞', parse_mode='html',reply_markup=keyboard)

        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é


    elif callback_query.data == 'show_statistic':
        try:

            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–û—Ç—á–µ—Ç',callback_data='show_otchet'),types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∫–∏' , callback_data='show_podpisk'))
            keyboard.add(types.InlineKeyboardButton(text='–ö—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª?',callback_data='who_payed'))
            keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='acc_back'))
            await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', parse_mode='html',reply_markup=keyboard)

            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        except Exception as e:
            print('Error:', str(e))




    elif callback_query.data == 'chang_balance':
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–ø–∏—Å–∫–∏:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await YooMoneySum.waiting_fot_sum.set()

    elif callback_query.data == 'change_procent':
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await YooMoneyProcent.waiting_fot_procent.set()  
    else:
        pass

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('select_user_')))
async def current_us(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        action_data = callback_query.data.split('_')
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',callback_data='st_days'))
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT test_period FROM chats WHERE  chat_id = ?",(action_data[-1],))
        date = cursor.fetchone()[0]
        days_to_expiry = calculate_days_to_expiry(date)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π

        response_text = f'–û—Å—Ç–∞–ª–æ—Å—å {days_to_expiry} –¥–Ω–µ–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±–∞–≤–∏—Ç—å –¥–Ω–∏.\n\n' \
                        f'–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: 15\n–ü—Ä–∏–º–µ—Ä —É–±–∞–≤–ª–µ–Ω–∏—è: -15'
        await bot.send_message(callback_query.message.chat.id, response_text,reply_markup=keyboard)
        await UpdateDaysState.waiting_for_days.set()
        await state.update_data(user_id=action_data[2])
    except:
        pass
    finally:
        conn.close()
    
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'st_days',state=UpdateDaysState)
async def st_days(callback_query: types.CallbackQuery,state: FSMContext):
    await state.finish()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='change_tarif'))
    await bot.send_message(callback_query.message.chat.id,'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'who_payed')
async def who_payed(callback_query: types.CallbackQuery):
    try:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∏—Ç–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = callback_query.message.chat.id

        # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT chat_id, acc_id, test_period FROM chats")
        subscriptions = cursor.fetchall()
        current_time_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        current_time = datetime.datetime.strptime(current_time_str, "%Y-%m-%d %H:%M:%S")

        if subscriptions:
            message = "<b>–î–∞–Ω–Ω—ã–µ –ª—é–¥–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ :</b>\n\n"
            for subscription in subscriptions:
                acc_id = subscription[1]
                cursor.execute("SELECT sum FROM user_money_pay WHERE id = ?", (acc_id,))
                sum_user = cursor.fetchone()[0]
                if sum_user == None:
                    sum_user = 0

                cursor.execute("SELECT id_telegram FROM clients WHERE id = ?", (acc_id,))
                id_telegram = cursor.fetchone()
                user = await bot.get_chat(id_telegram[0])
                chat = await bot.get_chat(subscription[0])
                test_period = datetime.datetime.strptime(subscription[2], '%Y-%m-%d %H:%M:%S')
                formatted_test_period = test_period.strftime('%Y-%m-%d %H:%M')
                message += f"–ê–∫–∫–∞—É–Ω—Ç <a href='{user.user_url}'>{user.username}</a> –≤ –≥—Ä—É–ø–ø–µ {chat.title} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {sum_user} ‚ÇΩ \n"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='stat_back'))

            await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        text=message, parse_mode='html',reply_markup=keyboard)

            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        else:
            await bot.answer_callback_query(callback_query.id, text='–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É', show_alert=True)

    except Exception as e:
        print('Error:', str(e))
    finally:
        conn.close()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_otchet')
async def show_otchet(callback_query: types.CallbackQuery):

    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='stat_back'))
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM clients WHERE id_telegram IS NOT NULL")
        users_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM clients WHERE test_period_end IS NOT NULL")
        users_count_test = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM chats WHERE id_avito IS NOT NULL AND client_id IS NOT NULL AND client_secret IS NOT NULL AND token IS NOT NULL")
        users_count_avito = cursor.fetchone()[0]
        cursor.execute("SELECT all_users FROM info_admins")
        vse = cursor.fetchone()[0]
        message = f'–í—Å–µ–≥–æ –ª—é–¥–µ–π –Ω–∞–∂–∞–ª–æ –Ω–∞ /start = {users_count}\n–ü–æ–ª—É—á–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á = {users_count_test}\n–ü–æ–¥–∫–ª—é—á–∏–ª–∏ Avito –∞–∫–∫–∞—É–Ω—Ç - {users_count_avito}\n–í—Å–µ–≥–æ –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É - {vse} —Ä–∞–∑'
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        text= message, parse_mode='html',reply_markup=keyboard)

        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    except Exception as e:
        await bot.send_message(callback_query.message.chat.id,f'–û—à–∏–±–∫–∞ - {str(e)}' )
    finally:
        conn.close()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'stat_back')
async def stat_back(callback_query: types.CallbackQuery):
    try:

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç—á–µ—Ç',callback_data='show_otchet'),types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∫–∏' , callback_data='show_podpisk'))
        keyboard.add(types.InlineKeyboardButton(text='–ö—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª?',callback_data='who_payed'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='acc_back'))

        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', parse_mode='html',reply_markup=keyboard)

        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    except Exception as e:
        print('Error:', str(e))





@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_podpisk')
async def show_podpisk(callback_query: types.CallbackQuery):
    try:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∏—Ç–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = callback_query.message.chat.id

        # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT chat_id, acc_id, test_period FROM chats")
        subscriptions = cursor.fetchall()
        cursor.execute("SELECT COUNT(*) FROM clients WHERE id_telegram IS NOT NULL")
        users_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM chats WHERE chat_id IS NOT NULL")
        chats_count = cursor.fetchone()[0]  
        current_time_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        current_time = datetime.datetime.strptime(current_time_str, "%Y-%m-%d %H:%M:%S")

        if subscriptions:
            message = f"<b>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - {users_count}:</b>\n\n"
            message+= f'<b>–í—Å–µ–≥–æ –≥—Ä—É–ø–ø - {chats_count}</b>\n\n'
            message += f'<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏</b>\n\n'
            for subscription in subscriptions:
                time = datetime.datetime.strptime(subscription[2], '%Y-%m-%d %H:%M:%S')
                if time >= current_time:
                    acc_id = subscription[1]
                    cursor.execute("SELECT id_telegram FROM clients WHERE id = ?", (acc_id,))
                    id_telegram = cursor.fetchone()
                    user = await bot.get_chat(id_telegram[0])
                    chat = await bot.get_chat(subscription[0])
                    test_period = datetime.datetime.strptime(subscription[2], '%Y-%m-%d %H:%M:%S')
                    formatted_test_period = test_period.strftime('%Y-%m-%d %H:%M')
                    message += f"–ê–∫–∫–∞—É–Ω—Ç <a href='{user.user_url}'>{user.username}</a> –≤ –≥—Ä—É–ø–ø–µ {chat.title} –¥–æ {formatted_test_period}\n"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='stat_back'))

            await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        text=message, parse_mode='html',reply_markup=keyboard)

            await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        else:
            await bot.answer_callback_query(callback_query.id, text='–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫', show_alert=True)

    except Exception as e:
        print('Error:', str(e))
    finally:
        conn.close()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'acc_back')
async def back_acc(callback_query: types.CallbackQuery):
    
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f'view_balance'),types.InlineKeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É ", callback_data=f'chang_balance'))
        keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å ‚Åí –ø–æ —Ä–µ—Ñ. —Å–∏—Å—Ç–µ–º–µ',callback_data='change_procent'))
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å–∫—É',callback_data='show_statistic'))
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ',callback_data='change_tarif'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'main_back'))
        
        # Use edit_message_text to edit the message with the updated keyboard markup
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
            reply_markup=keyboard,
        )
    except Exception as e:
        print('Error:', str(e))


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'main_back')
async def main_back(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    if callback_query.message.chat.id in admin_ids:
        keyboard.add(
            types.InlineKeyboardButton(text='üé• –í–∏–¥–µ–æ', callback_data='video'),
            types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='spisok')
        )
        keyboard.add(
            types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', callback_data='auto_answera'),
            types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='sos')
    )
        keyboard.add(types.InlineKeyboardButton(text='üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',callback_data='acc_back'))
    else:
        keyboard.add(
            types.InlineKeyboardButton(text='üé• –í–∏–¥–µ–æ', callback_data='video'),
            types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='spisok')
        )
        keyboard.add(
            types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', callback_data='auto_answera'),
            types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='sos')
    )
    keyboard.add(types.InlineKeyboardButton(text='üí∞ –í—ã–ø–ª–∞—Ç—ã', callback_data='send_money'))
    keyboard.add(types.InlineKeyboardButton(text='üí≥ –ë–∞–ª–∞–Ω—Å',callback_data='my_balance'))
    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT test_period_end FROM clients WHERE id_telegram = ?', (callback_query.message.chat.id,))
        test_period_end = cursor.fetchone()
        if test_period_end[0] is None:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(types.InlineKeyboardButton(text='üïí –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='test_period_start'))
    except:
        pass

    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=keyboard
    ) 


@dp.message_handler(state=UpdateDaysState.waiting_for_days)
async def update_days(message: Message, state: FSMContext):
    try:
        days = int(message.text)  # Assuming the user enters a valid integer for days
        user_data = await state.get_data()
        user_id = user_data.get('user_id', None)
        # Update the database with the new number of days for the user
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT test_period FROM chats WHERE chat_id = ?", (user_id,))
        current_test_period = cursor.fetchone()[0]

        # Convert the current_test_period to a datetime object
        current_test_period = datetime.datetime.strptime(current_test_period, '%Y-%m-%d %H:%M:%S')

        # Add the number of days to the current date
        new_test_period = current_test_period + datetime.timedelta(days=days)
        cursor.execute("UPDATE chats SET test_period = ? WHERE chat_id = ?", (new_test_period, user_id))
        conn.commit()
        conn.close()

        await message.reply(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ {days} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='change_tarif'))
        await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',reply_markup=keyboard)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.")

    # Finish the state
    await state.finish()

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('prev_page_', 'next_page_')))
async def pagination_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page_number = int(callback_query.data.split('_')[2])
    global users_per_page_2
    global current_page_2
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    chat_id = callback_query.message.chat.id
    cursor.execute("SELECT chat_id, acc_id, test_period FROM chats")
    subscriptions = cursor.fetchall()
    current_time_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    current_time = datetime.datetime.strptime(current_time_str, "%Y-%m-%d %H:%M:%S")
    if callback_query.data.startswith('prev_page_'):
        current_page_2 = max(current_page_2 - 1, 1)
    elif callback_query.data.startswith('next_page_'):
        current_page_2 = min(current_page_2 + 1, total_pages_2)

    # Calculate the index range for the current page
    start_index = (current_page_2 - 1) * users_per_page_2
    end_index = min(current_page_2 * users_per_page_2, len(subscriptions))

    # Create the updated inline keyboard
    updated_keyboard = types.InlineKeyboardMarkup()

    # Add users for the current page
    for i in range(start_index, end_index):
        subscription = subscriptions[i]
        time = datetime.datetime.strptime(subscription[2], '%Y-%m-%d %H:%M:%S')
        acc_id = subscription[1]
        cursor.execute("SELECT id_telegram FROM clients WHERE id = ?", (acc_id,))
        id_telegram = cursor.fetchone()
        user = await bot.get_chat(id_telegram[0])

        if time >= current_time:
            button_text = f'{user.username} ‚úÖ'
        else:
            button_text = f'{user.username} ‚ùå'

        button = types.InlineKeyboardButton(text=button_text, callback_data=f"select_user_{user.id}")
        updated_keyboard.add(button)

    # Add "Back" and "Next" buttons for pagination
    if current_page_2 > 1:
        updated_keyboard.add(types.InlineKeyboardButton(text='Back', callback_data=f'prev_page_{current_page_2 - 1}'))
    if current_page_2 < total_pages_2:
        updated_keyboard.add(types.InlineKeyboardButton(text='Next', callback_data=f'next_page_{current_page_2 + 1}'))

    # Add a "Return" button
    updated_keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='acc_back'))

    # Edit the existing message to update the user interface
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=updated_keyboard)



@dp.message_handler(state=YooMoneyProcent.waiting_fot_procent)
async def process_proc(message: Message, state: FSMContext):
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='acc_back'))  # Update this line
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—É
        user_input = message.text
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ)
        sum_to_set = float(user_input)

        # –ò–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É –≤ Quickpay
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()

        # –ó–∞–¥–∞–Ω–Ω—ã–π id_telegram, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å client_id

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ client_id –ø–æ id_telegram
        cursor.execute("UPDATE payment SET procent = ?, telegram_id = ?",(sum_to_set,message.from_user.id))
        conn.commit()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.answer(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ {sum_to_set}%.",reply_markup=keyboard)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await state.finish()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏.")

@dp.message_handler(state=YooMoneySum.waiting_fot_sum)
async def process_sum(message: Message, state: FSMContext):
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='acc_back'))  # Update this line
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—É
        user_input = message.text
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ)
        sum_to_set = float(user_input)

        # –ò–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É –≤ Quickpay
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()

        # –ó–∞–¥–∞–Ω–Ω—ã–π id_telegram, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å client_id

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ client_id –ø–æ id_telegram
        cursor.execute("UPDATE payment SET paysum = ?, telegram_id = ?",(sum_to_set,message.from_user.id))
        conn.commit()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Telegram
        await message.answer(f"–°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {sum_to_set} —Ä—É–±.", reply_markup=keyboard)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await state.finish()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã.")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    text = message.text

    if text.count(' ')==2:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        text = text.replace(' ','')
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_telegram = message.chat.id  # –ü—Ä–∏–º–µ—Ä id_telegram
        client_id = get_user_id(message.chat.id)   # –ü—Ä–∏–º–µ—Ä client_id

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º id_telegram
        select_query = 'SELECT * FROM clients WHERE id_telegram = ?'
        cursor.execute(select_query, (id_telegram,))

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        existing_record = cursor.fetchone()

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç–µ –µ—ë client_id
        if existing_record:
            update_query = 'UPDATE clients SET client_id = ? WHERE id_telegram = ?'
            cursor.execute(update_query, (text, id_telegram))
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é
            insert_query = 'INSERT INTO clients (id_telegram, client_id) VALUES (?, ?)'
            cursor.execute(insert_query, (id_telegram, client_id))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()
    else:
        pass
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('view-chat-group^','send-message-group^')))
async def action_callback(callback_query: types.CallbackQuery,state: FSMContext):
    action_data = callback_query.data
    action_data = callback_query.data.split('^')
    action = action_data[0]
    chat_id = ''
    user_id = ''
    if len(action_data)>2:
        user_id, chat_id= action_data[1], action_data[2]
    else:
        pass
    if action == 'back':
        global current_page  # Declare that we are using the global current_page variable
        global current_page_message_id  # Declare a global variable to store the message ID
        callback_query.data = f'page_{current_page}'
        page_number = int(callback_query.data.split('_')[1])
        current_page = page_number  # Update the current page
        # Trigger a refresh of the data
        await get_data(callback_query.message,just='responce')
    elif action == 'send-message-group':

    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ user_id –∏–∑ callback_data
        user_id, chat_id = action_data[1], action_data[2]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        now_button = types.InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data=f'send-group-now^{chat_id}^{user_id}')
        working_hours_button = types.InlineKeyboardButton("–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", callback_data=f'send-working-hours^{user_id}^{chat_id}')
        custom_time_button = types.InlineKeyboardButton("–í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", callback_data=f'send-custom-time^{user_id}^{chat_id}')
        
        keyboard.add(now_button, working_hours_button, custom_time_button)
        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
  
        await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ user_id –∏–∑ callback_data
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


    elif action == 'view-chat-group':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç"
        resp = get_user_id(callback_query.message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(callback_query.message.chat.id)
        data = await get_avito_messages(user_id=resp, chat_id=chat_id, token=token)
        chat_text = ""
        messages = data['messages'][:10]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for message in reversed(messages):
            message_type = message['type']
            sender = "<b>üë§ –í—ã</b>" if message['direction'] == 'out' else "<b>üì¨ –í–∞–º</b>"

            if message_type == 'text':
                text = message['content']['text']
                created_timestamp = message['created']
                created_date = datetime.datetime.fromtimestamp(created_timestamp).strftime('%A %d %B')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 27 —Å–µ–Ω—Ç—è–±—Ä—è"
                chat_text += f"{sender} ({created_date}): {text}\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'link':
                link_text = message['content']['link']['text']
                link_url = message['content']['link']['url']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É: {link_text} ({link_url})\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            elif message_type == 'location':
                location_data = message['content']['location']
                location_text = location_data['text']
                location_title = location_data['title']
                location_lat = location_data['lat']
                location_lon = location_data['lon']
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é:\n{location_text}\n({location_title}, –®–∏—Ä–æ—Ç–∞: {location_lat}, –î–æ–ª–≥–æ—Ç–∞: {location_lon})\n"
            elif message_type == 'photo':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é(–∏)\n"
            elif message_type == 'video':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∏–¥–µ–æ
                chat_text += f"{sender} ({created_date}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ\n"
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫–∏–µ –∫–∞–∫ quick_reply –∏ –¥—Ä—É–≥–∏–µ, –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

        token = get_token(callback_query.message.chat.id)

        await mark_chat_as_read(resp, chat_id, token=token)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message-group^{chat_id}^{user_id}'))
        keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'send^{user_id}^{chat_id}'))

        await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=chat_text,
        parse_mode='html',
        reply_markup=keyboard
    )
    


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'my_menu')
async def send_group(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',callback_data='check_vip'))
    keyboard.add(types.InlineKeyboardButton(text='üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏', callback_data='check_money'))
    keyboard.add(types.InlineKeyboardButton(text='‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',callback_data='check_connection'))
    keyboard.add(types.InlineKeyboardButton(text='üîå –†–µ—Ñ —Å—Å—ã–ª–∫–∞',callback_data='check_ref'))
    keyboard.add(types.InlineKeyboardButton(text="ü§ñ –ö –±–æ—Ç—É", url='https://t.me/tiqavito_bot'))
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    await bot.send_message(callback_query.message.chat.id,text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',reply_markup=keyboard)




@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('send-group-now^'))
async def send_group(callback_query: types.CallbackQuery,state: FSMContext):
    action_data = callback_query.data
    chat_text = ''
    action_data = callback_query.data.split('^')
    user_id, chat_id = action_data[1], action_data[2]
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'sgstop')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(cancel_button)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–π—á–∞—Å:",reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await MyStatesGroup.waiting_for_text.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    async with state.proxy() as data:
        data['chat_id'] = chat_id
        data['user_id'] = user_id
        data['telegram_chat_id'] = callback_query.message.chat.id  # –î–æ–±–∞–≤–ª—è–µ–º chat_id Telegram —á–∞—Ç–∞

@dp.callback_query_handler(lambda callback_query: callback_query.data =='sgstop', state=MyStatesGroup)
async def sgstop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.message.chat.id,'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')



@dp.message_handler(state=MyStatesGroup.waiting_for_text)
async def process_text4(message: Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = data['chat_id']
        user_id = get_user_id(message.chat.id)
        telegram_chat_id = data['telegram_chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id Telegram —á–∞—Ç–∞
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        resp = get_user_id(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º client_id
        token = get_token(message.chat.id)
        try:
            await send_message(chat_id=chat_id, user_id=resp, text=message.text, token=token)
            await mark_chat_as_read(resp, chat_id, token=token)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑", callback_data=f'send-group-now^{user_id}^{chat_id}'))
            keyboard.add(types.InlineKeyboardButton(text="üîö–ù–∞–∑–∞–¥", callback_data=f'seend^{user_id}^{chat_id}'))

            await bot.send_message(
                chat_id=telegram_chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat_id —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!',
                parse_mode='html',
                reply_markup=keyboard
            )
        except:
            await bot.send_message(
                chat_id=telegram_chat_id,
                text='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                parse_mode='html'
            )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def get_unread_messages(chat_id):
    avito_id = get_user_id(chat_id)
    token = get_token(chat_id)
    try:
        json_data = await get_unread_messagef_avito(token=token, user_id=avito_id)
        ch_id = ''
        # –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        sent_message_ids = sent_messages.get(chat_id, [])
                
        
        if "chats" in json_data:
            for chat in json_data["chats"]:
                message_id = chat["last_message"]["id"]
                if message_id not in sent_message_ids:
                    sent_message_ids.append(message_id)
                    sent_messages[chat_id] = sent_message_ids
                    ch_id = chat['id']
                    title = chat["context"]["value"]["title"]
                    price_string = chat["context"]["value"]["price_string"]
                    url = chat["context"]["value"]["url"]
                    city = chat["context"]["value"]["location"]["title"]

                    users = chat["users"]
                    author_name = ""
                    client_name = ""
                    for user in users:
                        if user["id"] == chat["last_message"]["author_id"]:
                            author_name = user["name"]
                        else:
                            client_name = user["name"]

                    last_message_text = chat["last_message"]["content"]["text"]

                    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    response_message = (
                        f"–¢–æ–≤–∞—Ä: [{markdown.escape_md(title)} {markdown.escape_md(price_string)}]({url})\n"
                        f"–ê–≤—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞: {markdown.escape_md(client_name)}\n"
                        f"–ì–æ—Ä–æ–¥: {markdown.escape_md(city)}\n"
                        f"–ö–ª–∏–µ–Ω—Ç: {markdown.escape_md(author_name)}\n\n"
                        f"‚úèÔ∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{markdown.escape_md(last_message_text)}\n\n"
                    )
                    
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'send-message-group^{ch_id}^{avito_id}'),types.InlineKeyboardButton(text="üí¨–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f'view-chat-group^{avito_id}^{ch_id}'))
                    keyboard.add(
                    types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='my_menu'),
                    types.InlineKeyboardButton(text="ü§ñ –ö –±–æ—Ç—É", url='https://t.me/tiqavito_bot')
                    )
                    await bot.send_message(chat_id, text=response_message,parse_mode=types.ParseMode.MARKDOWN,reply_markup=keyboard)
    except:
        pass

async def background_task(chat_id):
    while True:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await get_unread_messages(chat_id)
        await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

async def process_msgs_data(token, avito_id, data, current_day_ru):
    unread_messages = await get_unread_messagef_avito(token=token, user_id=avito_id)
    available_days = [day.strip() for day in data[4].split(',')]
    if current_day_ru in available_days and unread_messages:
        for message in unread_messages.get("chats", []):
            chat_id = message['id']
            response_text = ''
            lst_messages = ''
            
            try:
                lst_messages =  await get_lst_messages_v3_async(token=token, user_id=avito_id, chat_id=chat_id)
                response_text = find_matching_answer()

            except Exception as e:
                print(f"Error in answer: {e}")
                continue
            
            
            if response_text and len(lst_messages["messages"]) == 1 and len(lst_messages)<=2 and len(lst_messages)>0:
                try:
                    await send_message(chat_id=chat_id, user_id=avito_id, text=response_text[-1], token=token)
                    await mark_chat_as_read(avito_id, chat_id, token=token)
                except Exception as e:
                    print(f"Error sending message: {e}")

async def process_time_msgs_data(token, avito_id, data, current_day_ru):
    current_date = datetime.datetime.now().date()
    unread_messages = await get_unread_messagef_avito(token=token, user_id=avito_id)
    available_days = [day.strip() for day in data[4].split(',')]
    start_time = datetime.datetime.strptime(data[-2], '%H:%M').time()
    end_time = datetime.datetime.strptime(data[-1], '%H:%M').time()

    if current_day_ru in available_days and unread_messages:
        for message in unread_messages.get("chats", []):
            chat_id = message['id']
            response_text = ''
            message_created = datetime.datetime.fromtimestamp(message['created']).time()
            
            try:
                msg = await get_lst_messages_v3_async(token=token, user_id=avito_id, chat_id=chat_id)
                response_text = find_matching_answer_work()
            except Exception as e:
                print(f"Error in answer: {e}")
                continue
            
            today_messages = sum(1 for m in msg['messages'] if datetime.datetime.fromtimestamp(m['created']).date() == current_date)
            
            if start_time <= message_created <= end_time and today_messages == 1:
                try:
                    await send_message(chat_id=chat_id, user_id=avito_id, text=response_text, token=token)
                    await mark_chat_as_read(avito_id, chat_id, token=token)
                except Exception as e:
                    print(f"Error in answer: {e}")
                    continue
            else:
                if today_messages == 1:
                    try:
                        await send_message(chat_id=chat_id, user_id=avito_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è üï•', token=token)
                        await mark_chat_as_read(avito_id, chat_id, token=token)
                    except Exception as e:
                        print(f"Error in answer: {e}")
                        continue



async def send_unread_triggers():
    while True:
        
        chat_data = get_chats_with_triggers()
        msgs = get_chats_with_msgs()
        time_msgs = get_chats_with_time_msgs()
        current_day = datetime.datetime.now().strftime("%a").upper()        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞—Ä—å
        current_day_ru = day_mapping.get(current_day, current_day)
        for chat_id in chat_data:
            test = get_time2(chat_id[1]) 
            if test and chat_id[3]:

                token = get_token(chat_id[1])
                avito_id = get_user_id(chat_id[1])

                unread_messages = await get_unread_messagef_avito(token=token,user_id=avito_id)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if unread_messages:
        
                    for message in unread_messages["chats"]:
                        user_text = message["last_message"]["content"]["text"]
                        trigger, response_text = find_matching_trigger(user_text)
                        name_ob = message['context']['value']['title']
                        link_ob = message['context']['value']['url']
                        user_name = message['users'][0]['name']
                        text = message['last_message']['content'].get('text')
                        user_link = message['users'][0]['public_user_profile']['url']
                        if trigger and response_text:
                            await send_message(avito_id, message["id"] ,response_text, token)
                            await mark_chat_as_read(avito_id, chat_id[1], token)
                            await bot.send_message(chat_id[1], text=f'‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n–¢–æ–≤–∞—Ä: <a href = "{link_ob}">{name_ob}</a>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: <a href = "{user_link}">{user_name}</a>\n\‚úèÔ∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{text} \n\n‚úÖ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç: {response_text}',parse_mode='html')

        for data in msgs:
          
            test = get_time2(data[2])
            if test and data[3]:
                token = get_token(data[2])
                avito_id = get_user_id(data[2])
                await process_msgs_data(token, avito_id, data, current_day_ru)
        for data in time_msgs:
            test = get_time2(data[2])
            if test and data[3]:
                token = get_token(data[2])
                avito_id = get_user_id(data[2])
                await process_time_msgs_data(token, avito_id, data, current_day_ru)

        await asyncio.sleep(7)
                                    


async def process_chats_with_data():
    while True:
    # –ü–æ–ª—É—á–∏—Ç–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã avito_id, client_id, client_secret –∏ token
        conn = sqlite3.connect('my_database.db')
        data = None
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id FROM chats")
            data = cursor.fetchall()
            conn.close() 
        except:
            pass
        chats_with_data = get_chats_with_data()

        for chat in chats_with_data:
            chat_id = chat[0]
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            test = get_time2(chat_id)
            if test:
                try:
                    await get_unread_messages(chat_id)
                except Exception as e:
                    print(f"Error in get_unread_messages: {e}")

        await asyncio.sleep(5)

async def check_work_msgs():
    while True:
        current_time_str = datetime.datetime.now().strftime("%H:%M")
        current_time = datetime.datetime.strptime(current_time_str, "%H:%M").time()
        current_day = day_mapping[datetime.datetime.now().strftime("%a").upper()]
        conn = sqlite3.connect('my_database.db')
        data = None
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id, start_time, end_time, avito_chat, response_text, week_days,id FROM check_work_msgs")
            data = cursor.fetchall()
            conn.close() 
        except:
            pass
        if data:
            for item in data:
                test = get_time2(item[0])
                if test:

                    user_id = get_user_id(item[0])
                    token = get_token(item[0])
                    start_time = datetime.datetime.strptime(item[1], '%H:%M').time()
                    end_time = datetime.datetime.strptime(item[2], '%H:%M').time()
                    if start_time <= current_time <= end_time and current_day in item[-2]:
                        await send_message(chat_id=item[3], user_id=user_id, text=item[-3], token=token)
                        await mark_chat_as_read(user_id, item[3], token=token)
                        clear_check_work_msgs(item[-1])    

                    else:
                        print('No scheduled message for this time or day')

        await asyncio.sleep(2)

async def specific_time():
    while True:
        current_time_str = datetime.datetime.now().strftime("%H:%M")
        current_time = datetime.datetime.strptime(current_time_str, "%H:%M").time()
        conn = sqlite3.connect('my_database.db')
        data = None
        count = 0
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id,time,avito_chat,response_text FROM specific_msgs_time")
            data = cursor.fetchall()
            conn.close() 
        except:
            pass
        if data:
            for item in data:
                test = get_time2(item[0])
                if test:
                    user_id = get_user_id(item[0])
                    token = get_token(item[0])
                    time = datetime.datetime.strptime(item[1], '%H:%M').time()
                    if time == current_time:

                        await send_message(chat_id=item[2], user_id=user_id, text=item[-1], token=token)
                        await mark_chat_as_read(user_id, item[2], token=token)
                        clear_specific_msgs_time(item[2]) 

                    else:
                        pass
        await asyncio.sleep(2)

async def send_request(tg_id, chat_id, paysum):
    markup = types.InlineKeyboardMarkup(row_width=2)
    accept_button = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{tg_id}_{chat_id}_{paysum}")
    decline_button = types.InlineKeyboardButton("üö´ –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_{tg_id}_{chat_id}_{paysum}")
    markup.add(accept_button, decline_button)
    user_name = await bot.get_chat(tg_id)
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM money WHERE telegram_id = ?', (tg_id,))
    result = cursor.fetchone()
    for item in admin_ids:
        card = result[-1]
        await bot.send_message(item, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name.username} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞ –≤—ã–≤–æ–¥ {paysum} —Ä—É–±.\n\nüë§ –§–ò–û - <code>{result[-2]}</code>\n\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã <code>{result[-1]}</code>", reply_markup=markup,parse_mode='html')

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('accept_', 'decline_')))
async def handle_response(callback_query: types.CallbackQuery):
    action, tg_id, chat_id,paysum = callback_query.data.split('_')
    user_name = await bot.get_chat(tg_id)
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT money FROM chats WHERE chat_id = ?', (chat_id,))
    result = cursor.fetchone()
    if action == 'accept':

        # –í–∞—à –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–Ω–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=tg_id,text=f'–°–∫–æ—Ä–æ –≤–∞–º –ø–µ—Ä–µ–≤–µ–¥—É—Ç –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏, –æ—Å—Ç–∞–ª–æ—Å—å {float(result[0])-float(paysum)} ‚ÇΩ')
        cursor.execute('UPDATE chats SET money = ? WHERE chat_id = ?', (float(result[0])-float(paysum), chat_id))
        conn.commit()
        for item in admin_ids:
            await bot.send_message(chat_id=item,text=f'–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name.username} —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥')
    elif action == 'decline':
        await bot.send_message(chat_id=tg_id,text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞–º –ø–æ–∫–∞ –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ')
        for item in admin_ids:
            await bot.send_message(chat_id=item,text=f'–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name.username} –æ—Ç–∫–∞–∑ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥')



    cursor.execute("DELETE FROM money WHERE telegram_id = ?", (tg_id,))
    conn.commit()
    conn.close()

async def check_money_vivod():
    while True:
        try:
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM money")
            data = cursor.fetchall()
            conn.close()
            for item in data:
                await send_request(item[1], item[2] ,item[3])

            # –ñ–¥–∏—Ç–µ 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        except:
            pass
        await asyncio.sleep(30)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def update_tokens_periodically():
    while True:
        try:
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id,client_id,client_secret FROM chats")
            data = cursor.fetchall()
            conn.close()

            for chat in data:
                test = get_time2(chat[0])
                if test:
                    await update_token_for_chat(chat[0],chat[1],chat[2])
            # –ñ–¥–∏—Ç–µ 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        except:
            pass
        await asyncio.sleep(24* 3600)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def update_check_status():
    while True:
        try:
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id,status FROM check_status")
            data = cursor.fetchall()
            conn.close()
            for chat in data:
                test = get_time2(chat[0])
                if test == False:
                    if chat[1] == 1:
                        cursor.execute('UPDATE check_status SET status = ? WHERE chat_id = ?', (0, chat[0]))
                        conn.commit()
                        data = get_payment()     
                        itog_summa = data[-2]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
                        commission = itog_summa * data[-1]  # 20% –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
                        referring_user_id = get_referring_user_id_from_database(chat[0])
                        add_money_to_user(referring_user_id[0], commission)



                    
            # –ñ–¥–∏—Ç–µ 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        except:
            pass
        await asyncio.sleep(24* 3600)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö



if __name__ == '__main__':
    make_db()
    insert_initial_data()
    insert_all_users()
    loop = asyncio.get_event_loop()

    loop.create_task(update_tokens_periodically())
    loop.create_task(check_work_msgs())
    loop.create_task(specific_time())
    loop.create_task(process_chats_with_data())
    loop.create_task(send_unread_triggers()) 
    loop.create_task(check_money_vivod())
    loop.create_task(update_check_status())
    
    executor.start_polling(dp, skip_updates=True)